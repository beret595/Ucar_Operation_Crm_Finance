<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Powerise.Hygeia.Framework</name>
    </assembly>
    <members>
        <member name="T:Powerise.Hygeia.Framework.exception.HygeiaException">
            <summary>
            Hygeia异常对象（继承ApplicationException）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.exception.HygeiaException.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.exception.HygeiaException.#ctor(System.Exception)">
            <summary>
            把Exception转换成HygeiaExcepiton
            </summary>
            <param name="inner">基于Exception的对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.exception.HygeiaException.#ctor(System.String,System.Exception)">
            <summary>
            把Exception转换成HygeiaExcepiton
            </summary>
            <param name="msg">错误信息</param>
            <param name="inner">基于Exception的对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.exception.HygeiaException.#ctor(System.String)">
            <summary>
            把错误信息转换成HygeiaExcepiton
            </summary>
            <param name="errMsg">错误信息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.exception.HygeiaException.getRootCause">
            <summary>
            获取Excepiton异常对象
            </summary>
            <returns>异常对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.exception.HygeiaException.isException">
            <summary>
            判断是否为异常
            </summary>
            <returns>真为是</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.CodeTableHelper">
            <summary>
            业务字典辅助类。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CodeTableHelper.getCodeTable(System.String)">
            <summary>
            取得列名对应的码表
            </summary>
            <param name="ColumnName">码表的数据列名</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CodeTableHelper.getCodeTable(System.String,System.String)">
            <summary>
            取得列名对应的码表(指定中心)
            </summary>
            <param name="ColumnName">码表的数据列名</param>
            <param name="CenterId">指定的中心ID</param>
            <returns>DataView</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CodeTableHelper.getCodeTable(System.String,System.String,System.String)">
            <summary>
            取得列名对应的码表(指定过滤、排序条件)
            </summary>
            <param name="ColumnName">码表的数据列名</param>
            <param name="RowFilter">行过滤条件</param>
            <param name="Sort">排序</param>
            <returns>DataView</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CodeTableHelper.getDisplayValue(System.Int32,System.String)">
            <summary>
            通过码值和码表数据列名取对应的显示值
            </summary>
            <param name="data">码值</param>
            <param name="ColumnName">码表数据列名</param>
            <returns>对应的显示值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CodeTableHelper.getDisplayValue(System.Int32,System.String,System.String)">
            <summary>
            通过码值和码表数据列名取对应的显示值(指定中心)
            </summary>
            <param name="data">码值</param>
            <param name="ColumnName">码表数据列名</param>
            <param name="CenterId">指定的中心ID</param>
            <returns>对应的显示值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CodeTableHelper.getDisplayValue(System.String,System.String)">
            <summary>
            通过码值和码表数据列名取对应的显示值
            </summary>
            <param name="value">码值</param>
            <param name="name">数据字典名称</param>
            <returns>对应的显示值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CodeTableHelper.getDisplayValue(System.String,System.String,System.String)">
            <summary>
            通过码值和码表数据列名取对应的显示值(指定中心)
            </summary>
            <param name="value">码值</param>
            <param name="name">码表数据列名</param>
            <param name="centerId">中心编号[业务字典如果没有center_id将忽略此条件]</param>
            <returns>对应的显示值</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.CookieHelper">
            <summary>
            Cookie辅助类。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.createCookie(System.String)">
            <summary>
            根据登录用户名创建HttpCookie对象
            </summary>
            <param name="strLoginUser">用户登录名</param>
            <returns>HttpCookie对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.setCookie(System.String,System.Web.HttpContext)">
            <summary>
            根据登录用户名设置Cookie
            </summary>
            <param name="strLoginUser">用户登录名</param>
            <param name="context">请求的上下文环境</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.delCookie(System.Web.HttpContext)">
            <summary>
            删除Cookie
            </summary>
            <param name="context">请求的上下文环境</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.checkCookie(System.Web.UI.Page,System.String)">
            <summary>
            检查页面cookie
            </summary>
            <param name="page">页面对象</param>
            <param name="strLoginUser">用户登录名</param>
            <returns>是否符合要求</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.checkCookie(System.Web.HttpRequest,System.String)">
            <summary>
            检查请求cookie
            </summary>
            <param name="request">请求对象</param>
            <param name="strLoginUser">登录用户名</param>
            <returns>是否符合要求</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.createUserIndentity(System.String)">
            <summary>
            根据用户登录名创建用户定义
            </summary>
            <param name="strLoginUser">登录用户名</param>
            <returns>用户定义串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.getUerIndentity(System.Web.UI.Page)">
            <summary>
            从页面中获取用户登录信息（远洋使用，需要废弃，方法名拼写错误）
            </summary>
            <param name="page">页面对象</param>
            <returns>用户定义对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.getUserIndentity(System.Web.UI.Page)">
            <summary>
            从页面中获取用户登录信息
            </summary>
            <param name="page">页面对象</param>
            <returns>用户定义对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.getUserIndentity(System.Web.HttpRequest)">
            <summary>
            从请求中获取用户登录信息
            </summary>
            <param name="request">请求对象</param>
            <returns>用户定义对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.getUserIndentityString(System.Web.HttpRequest)">
            <summary>
            读取用户登录信息字符串
            </summary>
            <param name="request">请求对象</param>
            <returns>登录信息字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.getUserIndentity(System.String)">
            <summary>
            根据用户定义串返回用户定义对象
            </summary>
            <param name="strUserIndentity">用户定义串</param>
            <returns>用户定义对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.isLogin(System.Web.UI.Page)">
            <summary>
            校验页面是否已经包含登录信息
            </summary>
            <param name="page">页面对象</param>
            <returns>包含或不包含</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.isLogin(System.Web.HttpRequest)">
            <summary>
            校验请求是否已经包含登录信息
            </summary>
            <param name="request">请求</param>
            <returns>包含或不包含</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.isLogin(System.String)">
            <summary>
            校验用户定义串是否包含有效登录信息
            </summary>
            <param name="strUserIndentity">用户定义串</param>
            <returns>包含或不包含</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.isValidUser(System.String,System.String)">
            <summary>
            校验用户是否是否有效
            </summary>
            <param name="strLoginUser">登录用户名</param>
            <param name="strPassword">登录密码</param>
            <returns>有效或无效</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.createCheckCode(System.Web.HttpContext,System.String)">
            <summary>
            创建验证码
            </summary>
            <param name="context">请求上下文环境</param>
            <param name="code">验证码</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.delCheckCode(System.Web.HttpContext)">
            <summary>
            删除验证码
            </summary>
            <param name="context">请求上下文环境</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CookieHelper.verifyCheckCode(System.Web.HttpContext,System.String)">
            <summary>
            校验验证码
            </summary>
            <param name="context">请求上下文环境</param>
            <param name="code">验证码</param>
            <returns>true 成功 false 失败</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.CryptoHelper">
            <summary>
            加密解密辅助类。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CryptoHelper.#cctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CryptoHelper.CommonEncrypt(System.String)">
            <summary>
            通用加密函数
            </summary>
            <param name="ToEncryptString">需要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CryptoHelper.EncryptString(System.String)">
            <summary>
            EncryptString
            </summary>
            <param name="ToEncryptString"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CryptoHelper.CommonDecrypt(System.String)">
            <summary>
            通用解密函数
            </summary>
            <param name="ToDecryptString">需要解密的字符串</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CryptoHelper.DecryptString(System.String)">
            <summary>
            DecryptString
            </summary>
            <param name="ToDecryptString"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CryptoHelper.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[]@)">
            <summary>
            加密函数
            </summary>
            <param name="KEY">加密Key</param>
            <param name="IV">加密IV</param>
            <param name="TobeEncrypted">需要加密的字节数组</param>
            <param name="Encrypted">加密后的字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CryptoHelper.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[]@)">
            <summary>
            解密函数
            </summary>
            <param name="KEY">解密Key</param>
            <param name="IV">解密IV</param>
            <param name="TobeDecrypted">需要解密的字节数组</param>
            <param name="Decrypted">解密后的字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CryptoHelper.ConvertByteArrayToString(System.Byte[])">
            <summary>
            转换字节数组到字符串
            </summary>
            <param name="buf">字节数组</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CryptoHelper.ConvertStringToByteArray(System.String)">
            <summary>
            转换字符串到字节数组
            </summary>
            <param name="s">字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CryptoHelper.ToBase64String(System.Byte[])">
            <summary>
            转换字节数组到基于Base64编码的字符串
            </summary>
            <param name="buf">字节数组</param>
            <returns>Base64编码的字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.CryptoHelper.FromBase64String(System.String)">
            <summary>
            转换基于Base64编码的字符串到字节数组
            </summary>
            <param name="s">基于Base64编码的字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.DataTableHelper">
            <summary>
            DataTable辅助类（移植于微软知识库 DataSet Helper）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.CreateTable(System.Collections.IList)">
            <summary>
            创建DataTable
            </summary>
            <param name="alData">数据列表</param>
            <returns>一个DataTable</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.CreateTable(System.String)">
            <summary>
            创建DataTable
            举例:"Name String, ID Int32 Required, Field3 String Name + ID"
            三个字段 （名称、 ID 和 Field3）。
            类型 System.String , Name 和 Field3 域是， ID 字段必需字段并是 System.Int 32 类型。 Field3 包含 " 名称 + ID " 表达式的结果
            </summary>
            <param name="fieldList">字段列表</param>
            <returns>一个新且为空的DataTable</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.CreateTable(System.String,System.String)">
            <summary>
            创建DataTable
            举例:"Name String, ID Int32 Required, Field3 String Name + ID"
            三个字段 （名称、 ID 和 Field3）。
            类型 System.String , Name 和 Field3 域是， ID 字段必需字段并是 System.Int 32 类型。 Field3 包含 " 名称 + ID " 表达式的结果
            </summary>
            <param name="fieldList">字段列表</param>
            <param name="keyFieldList">主键字段</param>
            <returns>一个新且为空的DataTable</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.SelectDistinct(System.Data.DataTable,System.String)">
            <summary> 
            按照fieldName从sourceTable中选择出不重复的行， 
            相当于select distinct fieldName from sourceTable
            </summary>
            <param name="sourceTable">源DataTable</param> 
            <param name="fieldName">列名</param> 
            <returns>一个新的不含重复行的DataTable，列只包括fieldName指明的列</returns> 
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.SelectDistinct(System.Data.DataTable,System.String[])">
            <summary> 
            按照fieldName从sourceTable中选择出不重复的行， 
            相当于select distinct fieldName1,fieldName2,,fieldNamen from sourceTable 
            </summary>
            <param name="sourceTable">源DataTable</param> 
            <param name="fieldNames">列名数组</param> 
            <returns>一个新的不含重复行的DataTable，列只包括fieldNames中指明的列</returns> 
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.SelectDistinct(System.Data.DataTable,System.String,System.String,System.String)">
            <summary> 
            按rowFilter过滤sourceTable后选择出不重复的行最后按sort排序， 
            相当于select distinct fieldName1,fieldName2,,fieldNamen from sourceTable where rowFilter order by sort
            举例:"FirstName FName,LastName LName,BirthDate", "EmployeeID = 5", "BirthDate"
            </summary>
            <param name="sourceTable">源表</param> 
            <param name="fieldList">字段列表</param> 
            <param name="rowFilter">过滤条件</param> 
            <param name="sort">排序</param> 
            <returns>一个新的不含重复行的DataTable，列只包括fieldNames中指明的列</returns> 
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.Distinct(System.Data.DataTable,System.String)">
            <summary> 
            按照fieldName从sourceTable中选择出不重复的行， 
            并且包含sourceTable中所有的列。
            </summary>
            <param name="sourceTable">源表</param> 
            <param name="fieldName">字段</param> 
            <returns>一个新的不含重复行的DataTable</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.Distinct(System.Data.DataTable,System.String[])">
            <summary> 
            按照fieldNames从sourceTable中选择出不重复的行， 
            并且包含sourceTable中所有的列。
            </summary>
            <param name="sourceTable">源表</param> 
            <param name="fieldNames">字段</param> 
            <returns>一个新的不含重复行的DataTable</returns> 
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.Distinct(System.Data.DataTable)">
            <summary> 
            从sourceTable中选择出完全不重复的行， 
            并且包含sourceTable中所有的列。
            </summary>
            <param name="sourceTable">源表</param> 
            <returns>一个新的不含重复行的DataTable</returns> 
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.SelectInto(System.Data.DataTable,System.String,System.String,System.String)">
            <summary> 
            按sort排序，按rowFilter过滤sourceTable， 
            复制fieldList中指明的字段的数据到新DataTable(字段列表为空则复制全部字段)，并返回之
            举例:"FirstName FName,LastName LName,BirthDate", "EmployeeID = 5", "BirthDate"
            </summary> 
            <param name="sourceTable">源表</param> 
            <param name="fieldList">字段列表</param> 
            <param name="rowFilter">过滤条件</param> 
            <param name="sort">排序</param> 
            <returns>新DataTable</returns> 
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.SelectGroupByInto(System.Data.DataTable,System.String,System.String,System.String)">
            <summary> 
            按groupBy分组，按rowFilter过滤sourceTable
            复制fieldList中指明的字段的数据到新DataTable(字段列表不能为空)，并返回之
            举例:"EmployeeID,sum(Amount) Total,min(Amount) Min,max(Amount) Max", "EmployeeID = 5", "EmployeeID"
            </summary> 
            <param name="sourceTable">源表</param> 
            <param name="fieldList">字段列表</param> 
            <param name="rowFilter">过滤条件</param> 
            <param name="groupBy">分组列表</param> 
            <returns>新DataTable</returns> 
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.ColumnEqual(System.Object,System.Object)">
            <summary>
            比较列是否相等
            </summary>
            <param name="objectA">列a</param>
            <param name="objectB">列b</param>
            <returns>相等或不等</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.RowEqual(System.Data.DataRow,System.Data.DataRow,System.Data.DataColumnCollection)">
            <summary>
            比较行是否相等
            </summary>
            <param name="rowA">行a</param>
            <param name="rowB">行b</param>
            <param name="columns">比较的列集合</param>
            <returns>相等或不等</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.TableEqual(System.Data.DataTable,System.Data.DataTable,System.Data.DataColumnCollection)">
            <summary>
            比较表是否相等
            </summary>
            <param name="tableA">表a</param>
            <param name="tableB">表b</param>
            <param name="columns">比较的列集合</param>
            <returns>相等或不等</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.ToJson(System.Data.DataTable)">
            <summary>
            将数据表转换成JSON类型串
            </summary>
            <param name="table">要转换的数据表</param>
            <returns>json字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DataTableHelper.SetPrimaryKey(System.Data.DataTable,System.String)">
            <summary>
            设置主键（忽略大小写）
            </summary>
            <param name="sourceTable">源表</param>
            <param name="keyList">主键列表</param>
            <returns>返回设置主键后的DataTable</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.DateFunc">
            <summary>
            时间函数库。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.isDate(System.String)">
            <summary>
            判断一个字符串是否为日期格式
            </summary>
            <param name="strDate">表示日期的字符串</param>
            <returns>true表示字符串为日期格式，false表示字符串不为日期格式</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.formatDate(System.DateTime)">
            <summary>
            格式化时间为日期字符串（yyyy-MM-dd）
            </summary>
            <param name="dateToFormat">时间对象</param>
            <returns>日期字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.formatDateTime(System.DateTime)">
            <summary>
            格式化时间为日期时间字符串（yyyy-MM-dd HH:mm:ss）
            </summary>
            <param name="dateToFormat">时间对象</param>
            <returns>日期时间字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.formatTimestamp(System.DateTime)">
            <summary>
            格式化时间为带毫秒的日期时间字符串（yyyy-MM-dd HH:mm:ss.fff）
            </summary>
            <param name="dateToFormat">时间对象</param>
            <returns>带毫秒的日期时间字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.formatTime(System.DateTime)">
            <summary>
            格式化时间为时间字符串（HH:mm:ss）
            </summary>
            <param name="dateToFormat">时间对象</param>
            <returns>时间字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.transDate(System.String)">
            <summary>
            转换日期字符串成 年(四位)-月(两位)-天(两位) （用于Oracle SQL）
            </summary>
            <param name="strDate">要转换的日期字符串</param>
            <returns>转换后的日期字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.transDate(System.String,System.String)">
            <summary>
            转换日期成指定的格式（用于Oracle SQL）
            </summary>
            <param name="strDate">要转换的日期字符串</param>
            <param name="format">格式</param>
            <returns>转换后的日期字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.transDateTime(System.String)">
            <summary>
            转换日期字符串成 年(四位)-月(两位)-天(两位) 时:分:秒（用于Oracle SQL）
            </summary>
            <param name="strDate">要转换的日期字符串</param>
            <returns>转换后的日期时间字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.showDate(System.String)">
            <summary>
            按 年(四位)-月(两位)-天(两位) 显示日期（用于Oracle SQL）
            </summary>
            <param name="strDate">要显示的日期字符串</param>
            <returns>转换后的日期字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.showDateTime(System.String)">
            <summary>
            按 年(四位)-月(两位)-天(两位)  时:分:秒 显示日期时间（用于Oracle SQL）
            </summary>
            <param name="strDate">要显示的日期字符串</param>
            <returns>转换后的日期时间字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.showTime(System.String)">
            <summary>
            按 时:分:秒 显示日期时间（用于Oracle SQL）
            </summary>
            <param name="strDate">要显示的日期字符串</param>
            <returns>转换后的时间字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.showDate(System.String,System.String)">
            <summary>
            按指定格式显示日期（用于Oracle SQL）
            </summary>
            <param name="strDate">要显示的日期字符串</param>
            <param name="format">格式</param>
            <returns>转换后的日期字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DateFunc.yearOLD(System.String)">
            <summary>
            根据生日算年龄（用于Oracle SQL）
            </summary>
            <param name="birthDay"></param>
            <returns>取年龄的SQL字符串</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.DBConnectionType">
            <summary>
            数据库连接类型
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.DBConnectionType.Oracle">
            <summary>
            OracleConnection连接（不支持英文字符集，支持blob）
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.DBConnectionType.OleDb">
            <summary>
            OleDbConnection连接（支持英文字符集，不支持blob）
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.DBFunc">
            <summary>
            数据库函数库。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.#ctor">
            <summary>
            不需要实例化本类，只提供一些静态方法
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.getConnection">
            <summary>
            取数据库连接，并打开数据连接，如果数据库连接不成功将抛出异常，调用此方法时必须处理异常，使用完毕必须关闭
            </summary>
            <returns>数据库连接</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.getConnection(Powerise.Hygeia.Framework.util.DBConnectionType)">
            <summary>
            取数据库连接，并打开数据连接，如果数据库连接不成功将抛出异常，调用此方法时必须处理异常，使用完毕必须关闭
            </summary>
            <param name="type">数据库连接类型</param>
            <returns>数据库连接</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.getConnectionString(Powerise.Hygeia.Framework.util.DBConnectionType)">
            <summary>
            获取数据库连接字符串
            </summary>
            <param name="type">数据库连接类型</param>
            <returns>连接字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.getConnectionType(System.Data.IDbConnection)">
            <summary>
            获取数据库连接类型
            </summary>
            <param name="conn">数据库连接对象</param>
            <returns>数据库连接类型</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.getConnectionType(System.Data.IDbTransaction)">
            <summary>
            获取数据库连接类型
            </summary>
            <param name="trans">数据库事务对象</param>
            <returns>数据库连接类型</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.getConnectionType">
            <summary>
            获取数据库连接类型
            </summary>
            <returns>数据库连接类型(系统缺省使用连接类型）</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.closeConnection(System.Data.IDbConnection)">
            <summary>
            关闭数据库连接
            </summary>
            <param name="conn">数据库连接对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.getExceptionCode(System.Exception)">
            <summary>
            获取异常代码(Oracle错误号的数字部分)
            </summary>
            <param name="ex">数据库异常</param>
            <returns>返回数据库异常的代码（空异常-1 非数据库异常-2 不能获取异常代码-3 转换异常代码出错-4）</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeNonQuery(System.Object,System.String)">
            <summary>
            执行不返回结果集的SQL语句，手动控制事务，需要传入数据库事务对象
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="sql">需要执行的SQL语句</param>
            <returns>执行SQL语句影响的行数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeNonQuery(System.Object,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行不返回结果集的SQL语句，手动控制事务，需要传入数据库事务对象
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="sql">需要执行的SQL语句</param>
            <param name="commandParameters">执行SQL语句的参数数组</param>
            <returns>执行SQL语句影响的行数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeNonQuery(System.Object,System.String,System.Collections.Hashtable)">
            <summary>
            执行不返回结果集的SQL语句，手动控制事务，需要传入数据库事务对象
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="sql">需要执行的SQL语句</param>
            <param name="hashParams">使用Hashtable传入参数，此Hashtable中每个key-value对为一个参数</param>
            <returns>执行SQL语句影响的行数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeNonQuery(System.Object,System.String,System.Data.DataRow)">
            <summary>
            执行不返回结果集的SQL语句，手动控制事务，需要传入数据库事务对象
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="sql">需要执行的SQL语句</param>
            <param name="row">使用DataRow传入参数，此DataRow中每个列值为一个参数</param>
            <returns>执行SQL语句影响的行数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeReader(System.Object,System.String)">
            <summary>
            执行Select SQL语句，返回IDataReader对象，可以使用返回的对象循环读取数据，使用后需要关闭返回对象
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <returns>包含结果的IDataReader对象，不能脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeReader(System.Object,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行Select SQL语句，返回IDataReader对象，可以使用返回的对象循环读取数据，使用后需要关闭返回对象
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="commandParameters">执行SQL语句的参数数组</param>
            <returns>包含结果的IDataReader对象，不能脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeReader(System.Object,System.String,System.Collections.Hashtable)">
            <summary>
            执行Select SQL语句，返回IDataReader对象，可以使用返回的对象循环读取数据，使用后需要关闭返回对象
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="hashParams">使用Hashtable传入参数，此Hashtable中每个key-value对为一个参数</param>
            <returns>包含结果的IDataReader对象，不能脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeReader(System.Object,System.String,System.Data.DataRow)">
            <summary>
            执行Select SQL语句，返回IDataReader对象，可以使用返回的对象循环读取数据，使用后需要关闭返回对象
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="row">使用DataRow传入参数，此DataRow中每个列值为一个参数</param>
            <returns>包含结果的IDataReader对象，不能脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataSet(System.Object,System.String)">
            <summary>
            执行Select SQL语句，将执行结果保存到一个DataSet对象中
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataSet(System.Object,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行Select SQL语句，将执行结果保存到一个DataSet对象中
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="commandParameters">执行SQL语句的参数数组</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataSet(System.Object,System.String,System.Collections.Hashtable)">
            <summary>
            执行Select SQL语句，将执行结果保存到一个DataSet对象中
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="hashParams">使用Hashtable传入参数，此Hashtable中每个key-value对为一个参数</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataSet(System.Object,System.String,System.Data.DataRow)">
            <summary>
            执行Select SQL语句，将执行结果保存到一个DataSet对象中
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="row">使用DataRow传入参数，此DataRow中每个列值为一个参数</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataTable(System.Object,System.String)">
            <summary>
            执行Select SQL语句，将执行结果保存到一个DataTable对象中
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataTable(System.Object,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行Select SQL语句，将执行结果保存到一个DataTable对象中
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="commandParameters">执行SQL语句的参数数组</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataTable(System.Object,System.String,System.Collections.Hashtable)">
            <summary>
            执行Select SQL语句，将执行结果保存到一个DataTable对象中
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="hashParams">使用Hashtable传入参数，此Hashtable中每个key-value对为一个参数</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataTable(System.Object,System.String,System.Data.DataRow)">
            <summary>
            执行Select SQL语句，将执行结果保存到一个DataTable对象中
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="row">使用DataRow传入参数，此DataRow中每个列值为一个参数</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeScalar(System.Object,System.String)">
            <summary>
            执行Select SQL语句，返回一个单列值（返回结果只有一个值）
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <returns>执行SQL返回的一个单列值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeScalar(System.Object,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行Select SQL语句，返回一个单列值（返回结果只有一个值）
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="commandParameters">执行SQL语句的参数数组</param>
            <returns>执行SQL返回的一个单列值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeScalar(System.Object,System.String,System.Collections.Hashtable)">
            <summary>
            执行Select SQL语句，返回一个单列值（返回结果只有一个值）
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="hashParams">使用Hashtable传入参数，此Hashtable中每个key-value对为一个参数</param>
            <returns>执行SQL返回的一个单列值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeScalar(System.Object,System.String,System.Data.DataRow)">
            <summary>
            执行Select SQL语句，返回一个单列值（返回结果只有一个值）
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="row">使用DataRow传入参数，此DataRow中每个列值为一个参数</param>
            <returns>执行SQL返回的一个单列值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeList(System.Object,System.String)">
            <summary>
            执行Select SQL语句，将执行结果保存到一个IList对象中
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <returns>保存执行结果的IList对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeList(System.Object,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行Select SQL语句，将执行结果保存到一个IList对象中
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="commandParameters">执行SQL语句的参数数组</param>
            <returns>保存执行结果的IList对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeList(System.Object,System.String,System.Collections.Hashtable)">
            <summary>
            执行Select SQL语句，将执行结果保存到一个IList对象中
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="hashParams">使用Hashtable传入参数，此Hashtable中每个key-value对为一个参数</param>
            <returns>保存执行结果的IList对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeList(System.Object,System.String,System.Data.DataRow)">
            <summary>
            执行Select SQL语句，将执行结果保存到一个IList对象中
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="row">使用DataRow传入参数，此DataRow中每个列值为一个参数</param>
            <returns>保存执行结果的IList对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataTablePage(System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            执行Select SQL语句，取出指定页数的执行结果保存到一个DataTable对象中
            DataTable中会自动增加一个序号列page_rowno，不需要可以删除[DataTable.Columns.Remove("page_rowno")]
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">页数索引号（从1开始）</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataTablePage(System.Object,System.String,System.Data.IDbDataParameter[],System.Int32,System.Int32)">
            <summary>
            执行Select SQL语句，取出指定页数的执行结果保存到一个DataTable对象中
            DataTable中会自动增加一个序号列page_rowno，不需要可以删除[DataTable.Columns.Remove("page_rowno")]
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="commandParameters">执行SQL语句的参数数组</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">页数索引号（从1开始）</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataTablePage(System.Object,System.String,System.Collections.Hashtable,System.Int32,System.Int32)">
            <summary>
            执行Select SQL语句，取出指定页数的执行结果保存到一个DataTable对象中
            DataTable中会自动增加一个序号列page_rowno，不需要可以删除[DataTable.Columns.Remove("page_rowno")]
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="hashParams">使用Hashtable传入参数，此Hashtable中每个key-value对为一个参数</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">页数索引号（从1开始）</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataTablePage(System.Object,System.String,System.Data.DataRow,System.Int32,System.Int32)">
            <summary>
            执行Select SQL语句，取出指定页数的执行结果保存到一个DataTable对象中
            DataTable中会自动增加一个序号列page_rowno，不需要可以删除[DataTable.Columns.Remove("page_rowno")]
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="row">使用DataRow传入参数，此DataRow中每个列值为一个参数</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">页数索引号（从1开始）</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataTableRow(System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            执行Select SQL语句，取出指定行数的执行结果保存到一个DataTable对象中
            DataTable中会自动增加一个序号列page_rowno，不需要可以删除[DataTable.Columns.Remove("page_rowno")]
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="beginRow">起始行数(大于等于)</param>
            <param name="endRow">终止行数(小于等于)</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataTableRow(System.Object,System.String,System.Data.IDbDataParameter[],System.Int32,System.Int32)">
            <summary>
            执行Select SQL语句，取出指定行数的执行结果保存到一个DataTable对象中
            DataTable中会自动增加一个序号列page_rowno，不需要可以删除[DataTable.Columns.Remove("page_rowno")]
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="commandParameters">执行SQL语句的参数数组</param>
            <param name="beginRow">起始行数(大于等于)</param>
            <param name="endRow">终止行数(小于等于)</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataTableRow(System.Object,System.String,System.Collections.Hashtable,System.Int32,System.Int32)">
            <summary>
            执行Select SQL语句，取出指定行数的执行结果保存到一个DataTable对象中
            DataTable中会自动增加一个序号列page_rowno，不需要可以删除[DataTable.Columns.Remove("page_rowno")]
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="hashParams">使用Hashtable传入参数，此Hashtable中每个key-value对为一个参数</param>
            <param name="beginRow">起始行数(大于等于)</param>
            <param name="endRow">终止行数(小于等于)</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeDataTableRow(System.Object,System.String,System.Data.DataRow,System.Int32,System.Int32)">
            <summary>
            执行Select SQL语句，取出指定行数的执行结果保存到一个DataTable对象中
            DataTable中会自动增加一个序号列page_rowno，不需要可以删除[DataTable.Columns.Remove("page_rowno")]
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="row">使用DataRow传入参数，此DataRow中每个列值为一个参数</param>
            <param name="beginRow">起始行数(大于等于)</param>
            <param name="endRow">终止行数(小于等于)</param>
            <returns>保存执行结果的DataSet对象，可以脱离数据库连接使用</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeCount(System.Object,System.String)">
            <summary>
            执行Select SQL语句，返回记录数
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <returns>执行SQL返回记录数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeCount(System.Object,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行Select SQL语句，返回记录数
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="commandParameters">执行SQL语句的参数数组</param>
            <returns>返回记录数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeCount(System.Object,System.String,System.Collections.Hashtable)">
            <summary>
            /// 执行Select SQL语句，返回记录数
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="hashParams">使用Hashtable传入参数，此Hashtable中每个key-value对为一个参数</param>
            <returns>执行SQL返回记录数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeCount(System.Object,System.String,System.Data.DataRow)">
            <summary>
            执行Select SQL语句，返回记录数
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="row">使用DataRow传入参数，此DataRow中每个列值为一个参数</param>
            <returns>执行SQL返回记录数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.calcPageRange(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            计算当前页的行范围
            </summary>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">页数索引号（从1开始）</param>
            <param name="beginRow">起始行数</param>
            <param name="endRow">终止行数</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.getPageSelectSQL(System.String,System.Int32,System.Int32)">
            <summary>
            获取页选择SQL(通过页号)
            </summary>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">页数索引号（从1开始）</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.getRowSelectSQL(System.String,System.Int32,System.Int32)">
            <summary>
            获取行选择SQL(通过行号)
            </summary>
            <param name="selectSql">需要执行的SQL语句</param>
            <param name="beginRow">起始行数</param>
            <param name="endRow">终止行数</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.getPageCountSQL(System.String)">
            <summary>
            获取分页记录数SQL
            </summary>
            <param name="selectSql">需要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeCall(System.Object,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行存储过程，手动控制事务，需要传入数据库事务对象
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="callName">存储过程名称</param>
            <param name="commandParameters">执行SQL语句的参数数组(必须是OracleParameter)</param>
            <returns>执行SQL语句影响的行数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeBatch(System.Object,System.String,System.Collections.IList)">
            <summary>
            执行批量的SQL语句，手动控制事务，需要传入数据库事务对象
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="sql">SQL语句</param>
            <param name="paramList">执行SQL语句的参数列表</param>
            <returns>执行SQL语句影响的行数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.executeBatch(System.Object,System.String,System.Data.DataTable)">
            <summary>
            执行批量的SQL语句，手动控制事务，需要传入数据库事务对象
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="sql">SQL语句</param>
            <param name="paramTable">执行SQL语句的参数列表</param>
            <returns>执行SQL语句影响的行数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.transParameters(System.Data.IDbDataParameter[])">
            <summary>
            根据IDbDataParameter中的ParameterName-value对生成SQL参数对象
            </summary>
            <param name="param">一个IDbDataParameter数组对象</param>
            <returns>数据库参数对象数组</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.createParameters(System.Collections.Hashtable)">
            <summary>
            根据Hashtable中的key-value对生成SQL参数对象
            </summary>
            <param name="hash">一个Hashtable对象，其中每个key-value对需要生成一个数据库参数对象</param>
            <returns>数据库参数对象数组</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.createParameters(System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            根据Hashtable中的key-value对和key-oracletype对生成SQL参数对象
            </summary>
            <param name="hash">一个Hashtable对象，其中每个key-value对需要生成一个数据库参数对象</param>
            <param name="htType">key-oracletype参数类型</param>
            <returns>数据库参数对象数组</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.createParameters(System.Collections.Hashtable,System.String)">
            <summary>
            根据Hashtable中的key-value对生成SQL参数对象
            </summary>
            <param name="hash">一个Hashtable对象，其中每个key-value对需要生成一个数据库参数对象</param>
            <param name="strSql">需要执行的SQL语句，其中包含SQL参数（以:开头,如:corp_name）</param>
            <returns>数据库参数对象数组</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.createParameters(System.Collections.Hashtable,System.String,System.Collections.Hashtable)">
            <summary>
            根据Hashtable中的key-value对和key-oracletype对生成SQL参数对象
            </summary>
            <param name="hash">一个Hashtable对象，其中每个key-value对需要生成一个数据库参数对象</param>
            <param name="strSql">需要执行的SQL语句，其中包含SQL参数（以:开头,如:corp_name）</param>
            <param name="htType">key-oracletype参数类型</param>
            <returns>数据库参数对象数组</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.createParameters(System.Data.DataRow)">
            <summary>
            根据DataRow中的数据对生成SQL参数对象
            </summary>
            <param name="row">一个DataRow对象，其中每个列值需要生成一个数据库参数对象</param>
            <returns>数据库参数对象数组</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.createParameters(System.Data.DataRow,System.String)">
            <summary>
            根据DataRow中的数据对生成SQL参数对象
            </summary>
            <param name="row">一个DataRow对象，其中每个列值需要生成一个数据库参数对象</param>
            <param name="strSql">需要执行的SQL语句，其中包含SQL参数（以:开头,如:corp_name）</param>
            <returns>数据库参数对象数组</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.createParameters(System.Data.DataTable,System.String)">
            <summary>
            根据DataTable中的数据对生成SQL参数对象
            </summary>
            <param name="dtData">一个DataTable对象，其中每个列值需要生成一个数据库参数对象</param>
            <param name="strSql">需要执行的SQL语句，其中包含SQL参数（以:开头,如:corp_name）</param>
            <returns>数据库参数对象数组</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.typeToDbType(System.String)">
            <summary>
            转换系统类型到数据库类型
            </summary>
            <param name="typeName">系统类型全称</param>
            <returns>数据库类型</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.createListFromDataReader(System.Object,System.Data.IDataReader)">
            <summary>
            由OracleDataReader生成IList对象
            </summary>
            <param name="connOrTrans">数据库连接对象或数据库事务对象</param>
            <param name="reader">reader对象</param>
            <returns>IList对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.DBFunc.writeErrorLog(System.String,System.String,System.Data.IDbDataParameter[],System.Exception)">
            <summary>
            记录错误日志
            </summary>
            <param name="operaName">操作名</param>
            <param name="sql">SQL语句</param>
            <param name="param">参数</param>
            <param name="ex">异常信息</param>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.ErrorHelper">
            <summary>
            错误对象辅助类。
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.ErrorHelper.GET_CONNECTION_ERROR">
            <summary>
            获取数据库连接错误
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.ErrorHelper.CLASS_NOT_FOUND_ERROR">
            <summary>
            无法加载类错误（类不存在或者没有实现业务逻辑控制接口）
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.ErrorHelper.ACTION_MAPPING_ERROR">
            <summary>
            获取类映射错误
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.ErrorHelper.XML_PARSE_ERROR">
            <summary>
            XML解析错误
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.ErrorHelper.BIZ_EXECUTE_ERROR">
            <summary>
            业务逻辑执行错误
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.ErrorHelper.BIZ_CHECKRIGHT_ERROR">
            <summary>
            校验业务逻辑权限错误
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ErrorHelper.#ctor">
            <summary>
            构造函数（不能实例化此类）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ErrorHelper.handleError(Powerise.Hygeia.Framework.IResultObj,System.Int32,System.String,System.String,System.Exception)">
            <summary>
            处理错误对象
            </summary>
            <param name="result">结果对象</param>
            <param name="errType">错误类型</param>
            <param name="errCode">错误编码</param>
            <param name="errMsg">错误信息</param>
            <param name="e">异常对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ErrorHelper.handleError(Powerise.Hygeia.Framework.IResultObj,System.Int32,System.String,System.Exception)">
            <summary>
            处理错误对象
            </summary>
            <param name="result">结果对象</param>
            <param name="errType">错误类型</param>
            <param name="errCode">错误编码</param>
            <param name="e">异常对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ErrorHelper.handleError(Powerise.Hygeia.Framework.IResultObj,System.String,System.String,System.Exception)">
            <summary>
            处理错误对象（错误类型Error）
            </summary>
            <param name="result">结果对象</param>
            <param name="errCode">错误编码</param>
            <param name="errMsg">错误信息</param>
            <param name="e">异常对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ErrorHelper.handleError(Powerise.Hygeia.Framework.IResultObj,System.String,System.String)">
            <summary>
            处理错误对象（错误类型Error，无异常）
            </summary>
            <param name="result">结果对象</param>
            <param name="errCode">错误编码</param>
            <param name="errMsg">错误信息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ErrorHelper.handleError(Powerise.Hygeia.Framework.IResultObj,System.Int32,System.String,System.String)">
            <summary>
            处理错误对象（无异常）
            </summary>
            <param name="result">结果对象</param>
            <param name="errType">错误类型</param>
            <param name="errCode">错误编码</param>
            <param name="errMsg">错误信息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ErrorHelper.createError(System.String,System.String)">
            <summary>
            创建错误对象（错误类型info，无异常）
            </summary>
            <param name="errCode">错误编码</param>
            <param name="errMsg">错误信息</param>
            <returns>错误对象ErrorObj</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ErrorHelper.createError(System.Int32,System.String,System.String)">
            <summary>
            创建错误对象（无异常）
            </summary>
            <param name="errType">错误类型</param>
            <param name="errCode">错误编码</param>
            <param name="errMsg">错误信息</param>
            <returns>错误对象ErrorObj</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ErrorHelper.createError(System.String,System.String,System.Exception)">
            <summary>
            创建错误对象（错误类型Error）
            </summary>
            <param name="errCode">错误编码</param>
            <param name="errMsg">错误信息</param>
            <param name="e">异常对象</param>
            <returns>错误对象ErrorObj</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.FileFunc">
            <summary>
            文件目录函数库。
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.FileFunc.PATH_SPLIT_CHAR">
            <summary>
            路径分割符
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.GetFileSize(System.String)">
            <summary>
            获取文件长度，文件不存在返回-1
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件大小（不存在返回-1）</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.CanWrite(System.String)">
            <summary>
            判断文件是否可写
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件是否可写（不存在返回true）</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.CanRead(System.String)">
            <summary>
            判断文件是否可读
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件是否可读（不存在返回false）</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.GetSaveFileName(System.String,System.String,System.String)">
            <summary>
            获取指定目录下的文件名
            </summary>
            <param name="targetDir">目标目录（必须存在）</param>
            <param name="filePrefix">文件名前缀</param>
            <param name="fileExtension">文件名扩展</param>
            <returns>文件名（不带路径）</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.ReadFile(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件内容</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.CopyFiles(System.String,System.String,System.Boolean)">
            <summary>
            复制指定目录的所有文件,不包含子目录及子目录中的文件
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,表示覆盖同名文件,否则不覆盖</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.CopyFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            复制指定目录的所有文件
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>
            <param name="copySubDir">如果为true,包含目录,否则不包含</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.MoveFiles(System.String,System.String,System.Boolean)">
            <summary>
            剪切指定目录的所有文件,不包含子目录
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.MoveFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            剪切指定目录的所有文件
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>
            <param name="moveSubDir">如果为true,包含目录,否则不包含</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.DeleteFiles(System.String)">
            <summary>
            删除指定目录的所有文件，不包含子目录
            </summary>
            <param name="targetDir">操作目录</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.DeleteFiles(System.String,System.Boolean)">
            <summary>
            删除指定目录的所有文件和子目录
            </summary>
            <param name="targetDir">操作目录</param>
            <param name="delSubDir">如果为true,包含对子目录的操作</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.CreateDirectory(System.String)">
            <summary>
            创建指定目录
            </summary>
            <param name="targetDir">目录路径</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.CreateDirectory(System.String,System.String)">
            <summary>
            建立子目录
            </summary>
            <param name="parentDir">目录路径</param>
            <param name="subDirName">子目录名称</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.DeleteDirectory(System.String)">
            <summary>
            删除指定目录
            </summary>
            <param name="targetDir">目录路径</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.DeleteSubDirectory(System.String)">
            <summary>
            删除指定目录的所有子目录,不包括对当前目录文件的删除
            </summary>
            <param name="targetDir">目录路径</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.CreateXml(System.String)">
            <summary>
            将指定目录下的子目录和文件生成xml文档
            </summary>
            <param name="targetDir">根目录</param>
            <returns>返回XmlDocument对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.FileFunc.CreateBranch(System.String,System.Xml.XmlElement,System.Xml.XmlDocument)">
            <summary>
            生成Xml分支
            </summary>
            <param name="targetDir">子目录</param>
            <param name="xmlNode">父目录XmlDocument</param>
            <param name="myDocument">XmlDocument对象</param>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.LogType.INFO">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.LogType.WARN">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.LogType.ERROR">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.LogType.FATAL">
            <summary>
            严重错误
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.LogType.DEBUG">
            <summary>
            调式
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.LogHelper">
            <summary>
            日志输出辅助类（基于log4net）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.#cctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.getLogLevel">
            <summary>
            获取日志级别（配置文件的Debug字段维护）
            </summary>
            <returns>日志级别（-1：未配置 0：无 1：出错记录 2：全部记录）</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.getLogger(System.Type)">
            <summary>
            获取日志接口(使用root)
            </summary>
            <param name="type">调用类的类型</param>
            <returns>日志接口</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.getLogger(System.String,System.Type)">
            <summary>
            获取日志接口(使用domain指定)
            </summary>
            <param name="domain">输出日志对象的名称</param>
            <param name="type">调用类的类型</param>
            <returns>日志接口</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.log(System.Type,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="type">调用类的类型</param>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.log2(log4net.ILog,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.log(System.Type,System.String,System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="type">调用类的类型</param>
            <param name="message">日志消息</param>
            <param name="e">异常对象（可为空）</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.log2(log4net.ILog,System.String,System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="message">日志消息</param>
            <param name="e">异常对象（可为空）</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.log(System.Type,Powerise.Hygeia.Framework.util.LogType,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="type">调用类的类型</param>
            <param name="logtype">日志类型</param>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.log2(log4net.ILog,Powerise.Hygeia.Framework.util.LogType,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="logtype">日志类型</param>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.log(System.Type,Powerise.Hygeia.Framework.util.LogType,System.String,System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="type">调用类的类型</param>
            <param name="logtype">日志类型</param>
            <param name="e">异常对象（允许为空）</param>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.log2(log4net.ILog,Powerise.Hygeia.Framework.util.LogType,System.String,System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="logtype">日志类型</param>
            <param name="e">异常对象（允许为空）</param>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug(System.Type,System.String)">
            <summary>
            记录调试
            </summary>
            <param name="type">调用类的类型</param>
            <param name="message">调试消息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug2(log4net.ILog,System.String)">
            <summary>
            记录调试
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="message">调试消息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug(System.Type,System.String,System.Exception)">
            <summary>
            记录调试
            </summary>
            <param name="type">调用类的类型</param>
            <param name="message">调试消息</param>
            <param name="e">异常对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug2(log4net.ILog,System.String,System.Exception)">
            <summary>
            记录调试
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="message">调试消息</param>
            <param name="e">异常对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.format(System.String)">
            <summary>
            格式化输出String
            </summary>
            <param name="data">字符串</param>
            <returns>格式化字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug(System.Type,System.String,System.String)">
            <summary>
            调式输出String
            </summary>
            <param name="type">调用类的类型</param>
            <param name="message">调试信息</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug2(log4net.ILog,System.String,System.String)">
            <summary>
            调式输出String
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="message">调试信息</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.format(System.Collections.Hashtable)">
            <summary>
            格式化输出Hashtable
            </summary>
            <param name="data">哈希数据</param>
            <returns>格式化字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug(System.Type,System.String,System.Collections.Hashtable)">
            <summary>
            调式输出Hashtable
            </summary>
            <param name="type">调用类的类型</param>
            <param name="message">调试信息</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug2(log4net.ILog,System.String,System.Collections.Hashtable)">
            <summary>
            调式输出Hashtable
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="message">调试信息</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.format(System.Collections.IList)">
            <summary>
            格式化输出List（纵向）
            </summary>
            <param name="data">列表</param>
            <returns>格式化字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug(System.Type,System.String,System.Collections.IList)">
            <summary>
            调式输出List（纵向）
            </summary>
            <param name="type">调用类的类型</param>
            <param name="message">调试信息</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug2(log4net.ILog,System.String,System.Collections.IList)">
            <summary>
            调式输出List（纵向）
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="message">调试信息</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.format(System.Collections.IList,System.String,System.String)">
            <summary>
            格式化输出List（横向）
            </summary>
            <param name="data">列表</param>
            <param name="colspec">列分隔符（缺省为Tab符）</param>
            <param name="rowspec">行分隔符（缺省为换行符）</param>
            <returns>格式化字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug(System.Type,System.String,System.Collections.IList,System.String,System.String)">
            <summary>
            调式输出List（横向）
            </summary>
            <param name="type">调用类的类型</param>
            <param name="message">调试信息</param>
            <param name="colspec">列分隔符（缺省为Tab符）</param>
            <param name="rowspec">行分隔符（缺省为换行符）</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug2(log4net.ILog,System.String,System.Collections.IList,System.String,System.String)">
            <summary>
            调式输出List（横向）
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="message">调试信息</param>
            <param name="colspec">列分隔符（缺省为Tab符）</param>
            <param name="rowspec">行分隔符（缺省为换行符）</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.format(System.Data.DataRow)">
            <summary>
            格式化输出DataRow
            </summary>
            <param name="data">数据行</param>
            <returns>格式化字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug(System.Type,System.String,System.Data.DataRow)">
            <summary>
            调式输出DataRow
            </summary>
            <param name="type">调用类的类型</param>
            <param name="message">调试信息</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug2(log4net.ILog,System.String,System.Data.DataRow)">
            <summary>
            调式输出DataRow
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="message">调试信息</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.format(System.Data.DataTable)">
            <summary>
            格式化输出DataTable（纵向）
            </summary>
            <param name="data">数据表</param>
            <returns>格式化字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug(System.Type,System.String,System.Data.DataTable)">
            <summary>
            调式输出DataTable（纵向）
            </summary>
            <param name="type">调用类的类型</param>
            <param name="message">调试信息</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug2(log4net.ILog,System.String,System.Data.DataTable)">
            <summary>
            调式输出DataTable（纵向）
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="message">调试信息</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.format(System.Data.DataTable,System.String,System.String)">
            <summary>
            格式化输出DataTable（横向）
            </summary>
            <param name="data">数据表</param>
            <param name="colspec">列分隔符（缺省为Tab符）</param>
            <param name="rowspec">行分隔符（缺省为换行符）</param>
            <returns>格式化字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug(System.Type,System.String,System.Data.DataTable,System.String,System.String)">
            <summary>
            调式输出DataTable（横向）
            </summary>
            <param name="type">调用类的类型</param>
            <param name="message">调试信息</param>
            <param name="colspec">列分隔符（缺省为Tab符）</param>
            <param name="rowspec">行分隔符（缺省为换行符）</param>
            <param name="data">调试数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.LogHelper.debug2(log4net.ILog,System.String,System.Data.DataTable,System.String,System.String)">
            <summary>
            调式输出DataTable（横向）
            </summary>
            <param name="logger">输出日志接口</param>
            <param name="message">调试信息</param>
            <param name="colspec">列分隔符（缺省为Tab符）</param>
            <param name="rowspec">行分隔符（缺省为换行符）</param>
            <param name="data">调试数据</param>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.OleDbHelper">
            <summary>
            使用OleDb操作数据库的辅助类。
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.OleDbHelper.REGEX_PATTERN">
            <summary>
            oracle参数正则表达式
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.AttachParameters(System.Data.OleDb.OleDbCommand,System.Data.OracleClient.OracleParameter[])">
            <summary>
            绑定参数
            </summary>
            <param name="command">命令对象</param>
            <param name="commandParameters">oracle参数对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.PrepareCommand(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid OleDbTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of OracleParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.AttachBatchParameters(System.Data.OleDb.OleDbCommand,System.Data.OracleClient.OracleParameter[])">
            <summary>
            绑定参数
            </summary>
            <param name="command">命令对象</param>
            <param name="commandParameters">oracle参数对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.PrepareBatchCommand(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid OleDbTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of OracleParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            针对 Connection 执行 SQL 语句并返回受影响的行数
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Connection 执行 SQL 语句并返回受影响的行数
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            针对 Transaction 执行 SQL 语句并返回受影响的行数
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Transaction 执行 SQL 语句并返回受影响的行数
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            针对 Connection 执行 SQL 语句并返回Dataset
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Connection 执行 SQL 语句并返回Dataset
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            针对 Transaction 执行 SQL 语句并返回Dataset
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Transaction 执行 SQL 语句并返回Dataset
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[],Powerise.Hygeia.Framework.util.OleDbHelper.OleDbConnectionOwnership)">
            <summary>
            针对 Connection 执行 SQL 语句并返回DataReader
            </summary>
            <param name="connection"></param>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <param name="connectionOwnership"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            针对 Connection 执行 SQL 语句并返回DataReader
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Connection 执行 SQL 语句并返回DataReader
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            针对 Transaction 执行 SQL 语句并返回DataReader
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Transaction 执行 SQL 语句并返回DataReader
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            针对 Connection 执行 SQL 语句并返回查询所返回的结果集中第一行的第一列
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Connection 执行 SQL 语句并返回查询所返回的结果集中第一行的第一列
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            针对 Transaction 执行 SQL 语句并返回查询所返回的结果集中第一行的第一列
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Transaction 执行 SQL 语句并返回查询所返回的结果集中第一行的第一列
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.FillDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            填充Dataset
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.FillDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.OracleClient.OracleParameter[])">
            <summary>
            填充Dataset
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.FillDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            填充Dataset
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.FillDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.OracleClient.OracleParameter[])">
            <summary>
            填充Dataset
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.FillDataset(System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.OracleClient.OracleParameter[])">
            <summary>
            填充Dataset
            </summary>
            <param name="connection"></param>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteBatch(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.DataTable,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Connection 执行 SQL 语句批量提交，并返回受影响的行数
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="paramTable"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.ExecuteBatch(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.DataTable,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Transaction 执行 SQL 语句批量提交，并返回受影响的行数
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="paramTable"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.OleDbHelper.OleDbParam">
            <summary>
            oledb参数对象
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.OleDbHelper.OleDbParam._index">
            <summary>
            参数索引
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.OleDbHelper.OleDbParam._value">
            <summary>
            参数值(OleDbParameter)
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.OleDbParam.#ctor(System.Int32,System.Data.OleDb.OleDbParameter)">
            <summary>
            构造函数
            </summary>
            <param name="index">参数索引</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.OleDbParam.CompareTo(System.Object)">
            <summary>
            参数比较函数
            </summary>
            <param name="obj">被比较的参数对象</param>
            <returns>小于0 等于 大于0</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OleDbHelper.OleDbParam.CompareTo(Powerise.Hygeia.Framework.util.OleDbHelper.OleDbParam)">
            <summary>
            参数比较函数
            </summary>
            <param name="odp">被比较的参数对象</param>
            <returns>小于0 等于 大于0</returns>
        </member>
        <member name="P:Powerise.Hygeia.Framework.util.OleDbHelper.OleDbParam.Index">
            <summary>
            参数索引
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.util.OleDbHelper.OleDbParam.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.OleDbHelper.OleDbConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.OleDbHelper.OleDbConnectionOwnership.Internal">
            <summary>Connection is owned and managed by OleDbHelper</summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.OleDbHelper.OleDbConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.OracleHelper">
            <summary>
            使用Oracle操作数据库的辅助类。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.PrepareCommand(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid OracleTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of OracleParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            针对 Connection 执行 SQL 语句并返回受影响的行数
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Connection 执行 SQL 语句并返回受影响的行数
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            针对 Transaction 执行 SQL 语句并返回受影响的行数
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Transaction 执行 SQL 语句并返回受影响的行数
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            针对 Connection 执行 SQL 语句并返回Dataset
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Connection 执行 SQL 语句并返回Dataset
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            针对 Transaction 执行 SQL 语句并返回Dataset
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Transaction 执行 SQL 语句并返回Dataset
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[],Powerise.Hygeia.Framework.util.OracleHelper.OracleConnectionOwnership)">
            <summary>
            针对 Connection 执行 SQL 语句并返回DataReader
            </summary>
            <param name="connection"></param>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <param name="connectionOwnership"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            针对 Connection 执行 SQL 语句并返回DataReader
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Connection 执行 SQL 语句并返回DataReader
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            针对 Transaction 执行 SQL 语句并返回DataReader
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Transaction 执行 SQL 语句并返回DataReader
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            针对 Connection 执行 SQL 语句并返回查询所返回的结果集中第一行的第一列
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Connection 执行 SQL 语句并返回查询所返回的结果集中第一行的第一列
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            针对 Transaction 执行 SQL 语句并返回查询所返回的结果集中第一行的第一列
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Transaction 执行 SQL 语句并返回查询所返回的结果集中第一行的第一列
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.FillDataset(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            填充Dataset
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.FillDataset(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.OracleClient.OracleParameter[])">
            <summary>
            填充Dataset
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.FillDataset(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            填充Dataset
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.FillDataset(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.OracleClient.OracleParameter[])">
            <summary>
            填充Dataset
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.FillDataset(System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.OracleClient.OracleParameter[])">
            <summary>
            填充Dataset
            </summary>
            <param name="connection"></param>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteBatch(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.DataTable,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Connection 执行 SQL 语句批量提交，并返回受影响的行数
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="paramTable"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.OracleHelper.ExecuteBatch(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.DataTable,System.Data.OracleClient.OracleParameter[])">
            <summary>
            针对 Transaction 执行 SQL 语句批量提交，并返回受影响的行数
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="paramTable"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.OracleHelper.OracleConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.OracleHelper.OracleConnectionOwnership.Internal">
            <summary>Connection is owned and managed by OracleHelper</summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.OracleHelper.OracleConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.ProcessHelper">
            <summary>
            WEB层调用业务逻辑层的辅助类。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.#ctor(System.Web.UI.Page)">
            <summary>
            使用页面Page构造
            </summary>
            <param name="page">页面对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.#ctor(System.Web.UI.Page,System.String)">
            <summary>
            使用页面Page和功能号构造
            </summary>
            <param name="page">页面对象</param>
            <param name="strFuncID">功能号</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.init(System.String)">
            <summary>
            初始化
            </summary>
            <param name="strFuncID">业务调用功能号</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.setParameter(System.String,System.Object)">
            <summary>
            按参数名设置参数对象
            </summary>
            <param name="paramName">参数名</param>
            <param name="paramValue">参数值</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.setParameterSet(System.String,System.Collections.ArrayList)">
            <summary>
            按参数集合名设置参数对象
            </summary>
            <param name="setName">参数集合名</param>
            <param name="setValue">集合值（ArrayList）</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.runCall">
            <summary>
             执行业务逻辑层调用
            </summary>
            <returns>1执行成功，-1执行失败</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.getErrorMessage">
            <summary>
            获取提示信息
            </summary>
            <returns>提示信息</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.getErrorType">
            <summary>
            获取错误类型
            </summary>
            <returns>错误类型</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.getErrorNo">
            <summary>
            错误号
            </summary>
            <returns>错误号</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.getExceptionMessage">
            <summary>
            获取异常信息
            </summary>
            <returns>异常信息</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.getError">
            <summary>
            获取错误信息
            </summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.getErrorObj">
            <summary>
            获取错误对象
            </summary>
            <returns>错误对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.getResult(System.String)">
            <summary>
            根据结果名获取结果
            </summary>
            <param name="resultName">结果名</param>
            <returns>结果值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.getResultSet(System.String)">
            <summary>
            根据结果名获取结果集合
            </summary>
            <param name="setName">结果名</param>
            <returns>结果集合（DataTable）</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.getDefaultResultSet">
            <summary>
            获取缺省结果集
            </summary>
            <returns>缺省结果集合</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.getResultXml">
            <summary>
            获取结果对象字符串
            </summary>
            <returns>结果对象字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.getParameterXml">
            <summary>
            获取参数对象字符串
            </summary>
            <returns>参数对象字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.ProcessHelper.writeLog">
            <summary>
            记录调用日志
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.util.ProcessHelper.CallFuncID">
            <summary>
            业务调用功能号
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.util.ProcessHelper.ErrorMessage">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.util.ProcessHelper.CallErrorType">
            <summary>
            错误类型
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.util.ProcessHelper.CAllErrorNo">
            <summary>
            错误号
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.util.ProcessHelper.CallExceptionMessage">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.util.ProcessHelper.CallError">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.Security">
            <summary>
            Security 的摘要说明。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.Security.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.Security.EncryptString(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.Security.DecryptString(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Powerise.Hygeia.Framework.util.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.SysFunc">
            <summary>
            系统函数库。
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.SysFunc.CardNo_Length18">
            <summary>
            18位身份证长度
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.util.SysFunc.CardNo_Length15">
            <summary>
            15位身份证长度
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.getStackMsg(Powerise.Hygeia.Framework.IResultObj,System.Int32,System.String,System.String,System.String)">
            <summary>
            把错误对象赋值给结果对象
            </summary>
            <param name="rObj">结果对象</param>
            <param name="errType">错误类型</param>
            <param name="code">错误返回值</param>
            <param name="msg">错误信息</param>
            <param name="exp">异常信息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.Debug(System.Int32,System.String)">
            <summary>
            调式函数（输出到控制台，不推荐使用，建议使用LogHelper的debug方法）
            </summary>
            <param name="Level"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.getMaxNo(System.String)">
            <summary>
            取最大序列号
            </summary>
            <param name="argName">序列号名称（不区分大小写）</param>
            <returns>最大序列号</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.getMaxNo(System.String,System.Int32)">
            <summary>
            取最大序列号
            </summary>
            <param name="argName">序列号名称（不区分大小写）</param>
            <param name="argQuantify">申请的序列号个数</param>
            <returns>第一个最大序列号</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.getMaxNo(System.String,System.Int32,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            取最大序列号
            </summary>
            <param name="argName">序列号名称（不区分大小写）</param>
            <param name="argQuantify">申请的序列号个数</param>
            <param name="argconn">传入数据库事务</param>
            <param name="isCommit">是否提交,true :提交数据 false :不提交数据库</param>
            <returns>返回最大序列号</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.getMaxNo(System.String,System.Int32,System.Data.IDbTransaction)">
            <summary>
            取最大序列号
            </summary>
            <param name="argName">序列号名称（不区分大小写）</param>
            <param name="argQuantify">申请的序列号个数</param>
            <param name="argconn">传入数据库事务</param>
            <returns>返回最大序列号</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.calcExpression(System.String)">
            <summary>
            计算表达式（DataTable.Compute）
            </summary>
            <param name="strExpression">表达式</param>
            <returns>表达式的结果</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.getRound(System.Double,System.Int32)">
            <summary>
            处理四舍五入
            </summary>
            <param name="value">待处理数值</param>
            <param name="decimals">精度[0-15]</param>
            <returns>四舍五入后的结果</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.From15To18(System.String)">
            <summary>
            15位身份证转18位[此结果仅供参考，以实际身份证号码为准]
            </summary>
            <param name="idCardNo15">15位身份证号码</param>
            <returns>18位身份证号码</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.From18To15(System.String)">
            <summary>
            18位身份证转15位[此结果仅供参考，以实际身份证号码为准]
            </summary>
            <param name="idCardNo18">18位身份证号码</param>
            <returns>15位身份证号码</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.getCardNo(System.String,System.Int32)">
            <summary>
            把身份证号码转换指定位数[此结果仅供参考，以实际身份证号码为准]
            </summary>
            <param name="strCardNo">待转换的身份证号码</param>
            <param name="len">身份证位数[15或18]</param>
            <returns>转换后的身份证号码</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.MoneyNumtoCap(System.String)">
            <summary>
            阿拉伯数字转汉字金额大写
            </summary>
            <param name="strNum">阿拉伯数字(为空返回空字符串)</param>
            <returns>汉字金额大写</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.SysFunc.getIpAddress(System.Web.HttpRequest)">
            <summary>
            获取请求的IP地址
            </summary>
            <param name="request">请求对象</param>
            <returns>IP地址</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.UserLogHelper">
            <summary>
            用户日志辅助类。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.UserLogHelper.#cctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.UserLogHelper.isEnabled">
            <summary>
            判断是否允许记录用户日志
            </summary>
            <returns>真为允许</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.UserLogHelper.insertUserLog(System.Web.UI.Page,System.String)">
            <summary>
            插入用户日志
            </summary>
            <param name="page">页面对象</param>
            <param name="logContent">操作内容</param>
            <returns>大于0成功，小于0出错，0没有处理</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.UserLogHelper.insertUserLog(System.Web.UI.Page,System.String,System.Exception)">
            <summary>
            插入用户日志
            </summary>
            <param name="page">页面对象</param>
            <param name="logContent">操作内容</param>
            <param name="e">异常对象</param>
            <returns>大于0成功，小于0出错，0没有处理</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.UserLogHelper.insertUserLog(System.Web.UI.Page,System.String,System.Boolean,System.String)">
            <summary>
            插入用户日志
            </summary>
            <param name="page">页面对象</param>
            <param name="logContent">操作内容</param>
            <param name="logFlag">操作标志(真为成功，假为失败)</param>
            <param name="remark">备注</param>
            <returns>大于0成功，小于0出错，0没有处理</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.UserLogHelper.insertUserLog(Powerise.Hygeia.Framework.UserIndentity,System.String,System.String,System.Boolean,System.String)">
            <summary>
            插入用户日志
            </summary>
            <param name="user">用户对象</param>
            <param name="logName">操作名</param>
            <param name="logContent">操作内容</param>
            <param name="logFlag">操作标志(真为成功，假为失败)</param>
            <param name="remark">备注</param>
            <returns>大于0成功，小于0出错，0没有处理</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.UserLogHelper.insertUserLog(Powerise.Hygeia.Framework.UserIndentity,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            插入用户日志
            </summary>
            <param name="user">用户对象</param>
            <param name="logType">日志类型</param>
            <param name="logName">操作名</param>
            <param name="logContent">操作内容</param>
            <param name="logFlag">操作标志</param>
            <param name="remark">备注</param>
            <returns>大于0成功，小于0出错，0没有处理</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.util.XMLFunc">
            <summary>
            XML函数库。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.XMLFunc.xmlEncode(System.Object)">
            <summary>
            编码文本为XML标准的字符串（替换实体字符）
            </summary>
            <param name="src">源数据</param>
            <returns>编码后的文本</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.XMLFunc.getXMLDocFromStr(System.String)">
            <summary>
            根据xml字符串获取文档
            </summary>
            <param name="xml">XML字符串</param>
            <returns>XML文档对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.util.XMLFunc.transMarkupChar(System.String,System.Int32)">
            <summary>
            将XML的标记字符和实体引用相互转换
            </summary>
            <param name="src">源字符串</param>
            <param name="flag">转换标志（1：XML的标记字符转换成实体引用 2：实体引用还原）</param>
            <returns>转换后的字符串对象</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.ActionController">
            <summary>
            业务逻辑控制对象。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ActionController.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ActionController.#ctor(System.Web.HttpRequest)">
            <summary>
             构造函数
            </summary>
            <param name="request">请求对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ActionController.service(Powerise.Hygeia.Framework.IParameterObj,Powerise.Hygeia.Framework.IResultObj)">
            <summary>
            业务逻辑加载服务
            </summary>
            <param name="parameter">参数对象</param>
            <param name="result">结果对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ActionController.serviceInternal(Powerise.Hygeia.Framework.IParameterObj,Powerise.Hygeia.Framework.IResultObj)">
            <summary>
            业务逻辑加载服务(内部实现)
            </summary>
            <param name="parameter">参数对象</param>
            <param name="result">结果对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ActionController.writeLog(Powerise.Hygeia.Framework.IParameterObj,Powerise.Hygeia.Framework.IResultObj)">
            <summary>
            记录日志
            </summary>
            <param name="parameter"></param>
            <param name="result"></param>
        </member>
        <member name="T:Powerise.Hygeia.Framework.AppConfig">
            <summary>
            应用程序全局配置对象。
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.AppConfig.ConnectString">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.AppConfig.WebBasePath">
            <summary>
            Web起始地址
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.AppConfig.LocalId">
            <summary>
            本地化标志（项目名称汉字大写简拼）
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.AppConfig.OracleDbCharacterSet">
            <summary>
            数据库字符集合（ZHS16GBK  US7ASCII）
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.AppConfig.ManagementServerUrl">
            <summary>
            管理服务器地址
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.AppConfig.SystemName">
            <summary>
            系统名称（中文）
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.AppConfig.ApplicationName">
            <summary>
            应用名称（英文）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.AppConfig.GetAppDirectory(System.String)">
            <summary>
            获取应用程序目录（目录不存在则自动产生）
            </summary>
            <param name="subDir">子目录（多级目录用"\\"分隔，为空指向应用程序根目录）</param>
            <returns>以"\\"分隔和结尾的本地目录路径</returns>
        </member>
        <member name="P:Powerise.Hygeia.Framework.AppConfig.HostName">
            <summary>
            主机名
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.AppConfig.InstanceName">
            <summary>
            实例名
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.CodeTableMapping">
            <summary>
            业务字典缓存对象（使用Singleton将sys_codetable数据缓存到系统内存）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.CodeTableMapping.getInstance">
            <summary>
            获取此类的唯一实例（不能使用构造方法实例化）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.CodeTableMapping.getDisplayValue(System.Int32,System.String)">
            <summary>
            获取显示值
            </summary>
            <param name="data">数据值</param>
            <param name="strColumn">业务字典名称</param>
            <returns>对应的显示值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.CodeTableMapping.getDisplayValue(System.Int32,System.String,System.String)">
            <summary>
            根据中心获取显示值
            </summary>
            <param name="data">数据值</param>
            <param name="strColumn">业务字典名称</param>
            <param name="CenterId">中心编号</param>
            <returns>对应的显示值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.CodeTableMapping.getDisplayValue(System.String,System.String)">
            <summary>
            获取显示值
            </summary>
            <param name="value">数据值[为空返回空字符串]</param>
            <param name="name">业务字典名称[不存在返回查询值]</param>
            <returns>对应的显示值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.CodeTableMapping.getDisplayValue(System.String,System.String,System.String)">
            <summary>
            根据中心获取显示值
            </summary>
            <param name="value">数据值[为空返回空字符串]</param>
            <param name="name">业务字典名称[不存在返回查询值]</param>
            <param name="centerId">中心编号[业务字典如果没有center_id将忽略此条件]</param>
            <returns>对应的显示值</returns>
        </member>
        <member name="P:Powerise.Hygeia.Framework.CodeTableMapping.Item(System.String)">
            <summary>
            通过业务字典名称获取对应业务字典数据
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.DataWindowMapping">
            <summary>
            数据窗口定义缓存对象（使用Singleton将sys_datawindow数据缓存到系统内存）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.DataWindowMapping.getInstance">
            <summary>
            获取此类的唯一实例（不能使用构造方法实例化）
            </summary>
            <returns>此类的唯一实例</returns>
        </member>
        <member name="P:Powerise.Hygeia.Framework.DataWindowMapping.Item(System.String)">
            <summary>
            通过名称取数据窗口的定义数据
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.DBActionMapping">
            <summary>
            业务逻辑模块定义缓存对象（使用Singleton将sys_methods数据缓存到系统内存）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.DBActionMapping.getInstance">
            <summary>
            获取此类的唯一实例（不能使用构造方法实例化）
            </summary>
            <returns>此类的唯一实例</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.DBActionMapping.init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.DBActionMapping.CheckRight">
            <summary>
            检查权限标志
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.DBActionMapping.LogFlag">
            <summary>
            用户日志标志
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.DBActionMapping.Item(System.String)">
            <summary>
            通过功能号获取业务逻辑模块定义数据
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.IMapping">
            <summary>
            实现内存缓存数据映射的接口。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IMapping.getByCode(System.String)">
            <summary>
            根据键值获取对应的Mapping项
            </summary>
            <param name="code">键值</param>
            <returns>Mapping项</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IMapping.get">
            <summary>
            获取映射关系集合
            </summary>
            <returns>映射关系集合</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IMapping.set(System.String,System.Object)">
            <summary>
            向Mapping中加入新的项
            </summary>
            <param name="code">键值</param>
            <param name="value">mapping项</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IMapping.refresh">
            <summary>
            刷新Mapping
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IMapping.init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.IParamEncoder">
            <summary>
            参数对象编码处理接口（将参数对象编码为传输需要的格式）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParamEncoder.getResult">
            <summary>
            获取处理后的结果
            </summary>
            <returns>处理结果对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParamEncoder.encodeParam(Powerise.Hygeia.Framework.IParameterObj)">
            <summary>
            对参数对象进行编码处理
            </summary>
            <param name="paramObj">参数对象</param>
            <returns>处理结果</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.IParameterParse">
            <summary>
            实现参数对象解析的接口。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterParse.parse(System.String)">
            <summary>
            解析参数
            </summary>
            <param name="param">参数</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterParse._destroy">
            <summary>
            摧毁对象
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterParse.setParameterObj(Powerise.Hygeia.Framework.IParameterObj)">
            <summary>
            设置参数对象
            </summary>
            <param name="parameterObj">参数对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterParse.getParameterObj">
            <summary>
            获取参数对象
            </summary>
            <returns>参数对象</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.IResultDecoder">
            <summary>
            实现结果对象解码的接口。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultDecoder.decodeResult(System.Object)">
            <summary>
            对结果数据进行解码
            </summary>
            <param name="result">结果对象</param>
            <returns>处理结果</returns>
        </member>
        <member name="P:Powerise.Hygeia.Framework.IResultDecoder.resultObj">
            <summary>
            结果对象
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.IResultRender">
            <summary>
            结果对象编码处理接口（将结果对象编码为传输需要的格式）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultRender.render(Powerise.Hygeia.Framework.IResultObj)">
            <summary>
            生成结果对象
            </summary>
            <param name="resultOjb"></param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultRender.getResultObj">
            <summary>
            获取结果对象
            </summary>
            <returns>结果对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultRender.setResultObj(Powerise.Hygeia.Framework.IResultObj)">
            <summary>
            设置结果对象
            </summary>
            <param name="resultObj">结果对象</param>
        </member>
        <member name="T:Powerise.Hygeia.Framework.MappingManager">
            <summary>
            管理内存数据对象。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingManager.getInstance">
            <summary>
            获取此类的唯一实例（不能使用构造方法实例化）
            </summary>
            <returns>此类的唯一实例</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingManager.add(Powerise.Hygeia.Framework.IMapping)">
            <summary>
            增加内存mapping
            </summary>
            <param name="ins">mapping对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingManager.refresh">
            <summary>
            刷新内存mapping
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.MappingVersion">
            <summary>
            管理所有全局缓存对象。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingVersion.getVersion(System.Type)">
            <summary>
            获取版本号
            </summary>
            <param name="type">Mapping类型</param>
            <returns>版本号</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingVersion.checkVersion">
            <summary>
            检查版本（版本如果发生变化，自动设置新的版本号）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingVersion.checkVersion(System.String,System.Data.DataRow)">
            <summary>
            检查版本（版本如果发生变化，自动设置新的版本号）
            </summary>
            <param name="strName">Mapping类型</param>
            <param name="row">缓存行数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingVersion.checkVersion(System.String)">
            <summary>
            检查版本（版本如果发生变化，自动设置新的版本号）
            </summary>
            <param name="strName">Mapping类型</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingVersion.checkVersion(System.Type)">
            <summary>
            检查版本（版本如果发生变化，自动设置新的版本号）
            </summary>
            <param name="type">Mapping类型</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingVersion.setVersion(System.String)">
            <summary>
            设置版本（版本号自动加1，每次系统重启自动从1开始）
            </summary>
            <param name="strName">Mapping类型名称</param>
            <returns>版本号</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingVersion.setVersion(System.Type)">
            <summary>
            设置版本（版本号自动加1）
            </summary>
            <param name="type">Mapping类型</param>
            <returns>版本号</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingVersion.setStatusInfo(System.Type,System.String)">
            <summary>
            设置Mapping状态
            </summary>
            <param name="type">Mapping类型</param>
            <param name="status">状态信息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingVersion.setStatusInfo(System.Type,System.Int32)">
            <summary>
            设置Mapping状态
            </summary>
            <param name="type">Mapping类型</param>
            <param name="rowscount">记录数</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingVersion.getMappingInfo">
            <summary>
            获取Mapping列表
            </summary>
            <returns>Mapping列表</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.MappingVersion.bindMapping(System.Type)">
            <summary>
            绑定Mapping数据
            </summary>
            <param name="type">类型数据</param>
            <returns>绑定后的数据集</returns>
        </member>
        <member name="P:Powerise.Hygeia.Framework.MappingVersion.Instance">
            <summary>
            获取此类的唯一实例（不能使用构造方法实例化）
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.ParameterMapping">
            <summary>
            系统参数缓存对象。（使用Singleton将sys_parameter数据和系统配置文件中的appSettings缓存到系统内存）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterMapping.getInstance">
            <summary>
            获取此类的唯一实例（不能使用构造方法实例化）
            </summary>
            <returns>此类的唯一实例</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterMapping.getByCode(System.String)">
            <summary>
            根据名称获取系统参数值
            </summary>
            <param name="code">系统参数名称（不区分大小写）</param>
            <returns>系统参数值(如果为空返回空值)</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterMapping.getByCode(System.String,System.Object)">
            <summary>
            根据名称获取系统参数值
            </summary>
            <param name="code">系统参数名称（不区分大小写）</param>
            <param name="value">缺省值（不存在系统参数时返回）</param>
            <returns>系统参数值(如果为空返回缺省值)</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterMapping.getStringByCode(System.String)">
            <summary>
            根据名称获取转换成字符串的系统参数值
            </summary>
            <param name="code">系统参数名称（不区分大小写）</param>
            <returns>系统参数值(如果为空返回空字符串)</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterMapping.getStringByCode(System.String,System.String)">
            <summary>
            根据名称获取转换成字符串的系统参数值
            </summary>
            <param name="code">系统参数名称（不区分大小写）</param>
            <param name="value">缺省值（参数值为空或为空串时返回）</param>
            <returns>系统参数值(如果参数值为空或为空串返回缺省值)</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterMapping.get">
            <summary>
            返回系统参数列表（Hashtable结构 key-value）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterMapping.set(System.String,System.Object)">
            <summary>
            设置系统参数
            </summary>
            <param name="code">系统参数名称</param>
            <param name="value">系统参数值</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterMapping.remove(System.String)">
            <summary>
            删除系统参数
            </summary>
            <param name="code">系统参数名称</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterMapping.refresh">
            <summary>
            刷新系统参数（更新数据库维护和配置文件的系统参数，应用程序维护的保留不变）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterMapping.init">
            <summary>
            初始化（保留使用）
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.ParameterObj">
            <summary>
            参数对象（实现IParameterObj接口）。
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.IParameterObj">
            <summary>
            参数对象接口（建议不要直接将参数对象传入业务实体类中）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterObj.init">
            <summary>
            初始化参数对象（系统框架使用）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterObj.destroy">
            <summary>
            析构参数对象（系统框架使用）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterObj.setFuncitionID(System.String)">
            <summary>
            设置调用功能号（系统框架使用）
            </summary>
            <param name="funcId"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterObj.getActionCode">
            <summary>
            取系统调用功能号（系统框架使用）
            </summary>
            <returns>调用功能号</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterObj.setParameter(System.String,System.Object)">
            <summary>
            按指定名称给参数赋值（系统框架使用）
            </summary>
            <param name="paramName">参数名</param>
            <param name="param">参数值</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterObj.setParamSet(System.String,System.Collections.ArrayList)">
            <summary>
            按参数名给参数集赋值（系统框架使用）
            </summary>
            <param name="paramSetName">参数集名称</param>
            <param name="paramSet">参数集</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterObj.setUserIndentity(Powerise.Hygeia.Framework.UserIndentity)">
            <summary>
            设置操作用户信息（系统框架使用）
            </summary>
            <param name="userIndentity">操作用户对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterObj.getParameter(System.String)">
            <summary>
            取指定名称的参数值
            </summary>
            <param name="paramName">参数名称</param>
            <returns>参数值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterObj.getParamSet(System.String)">
            <summary>
            按参数名取参数集
            </summary>
            <param name="paramSetName">参数集名称</param>
            <returns>参数集，每一行为Hashtable对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterObj.getAllParameters">
            <summary>
            取得参数对象的所有成员
            </summary>
            <returns>包含参数值的Hashtable对象，每个key-value对表示一个参数，key为参数名称，value为参数值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterObj.getAllParamSet">
            <summary>
            获取所有的参数集的集合
            </summary>
            <returns>包含所有参数集的Hashtable，每个key-value对为一个参数集，key为参数集名称，value为表示参数集的ArrayList对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IParameterObj.getUserIndentity">
            <summary>
            获取操作用户信息
            </summary>
            <returns>操作用户对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.getParameter(System.String)">
            <summary>
            取指定名称的参数值
            </summary>
            <param name="paramName">参数名称</param>
            <returns>参数值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.getActionCode">
            <summary>
            取系统调用功能号（系统框架使用）
            </summary>
            <returns>调用功能号</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.setParameter(System.String,System.Object)">
            <summary>
            按指定名称给参数赋值（系统框架使用）
            </summary>
            <param name="paramName">参数名</param>
            <param name="param">参数值</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.getParamSet(System.String)">
            <summary>
            按参数名取参数集
            </summary>
            <param name="paramSetName">参数集名称</param>
            <returns>参数集，每一行为Hashtable对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.setParamSet(System.String,System.Collections.ArrayList)">
            <summary>
            按参数名给参数集赋值（系统框架使用）
            </summary>
            <param name="paramSetName">参数集名称</param>
            <param name="paramSet">参数集</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.init">
            <summary>
            初始化参数对象（系统框架使用）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.getAllParameters">
            <summary>
            取得参数对象的所有成员
            </summary>
            <returns>包含参数值的Hashtable对象，每个key-value对表示一个参数，key为参数名称，value为参数值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.setFuncitionID(System.String)">
            <summary>
            设置调用功能号（系统框架使用）
            </summary>
            <param name="funcId"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.ToString">
            <summary>
            格式化参数对象
            </summary>
            <returns>参数对象字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.destroy">
            <summary>
            析构参数对象（系统框架使用）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.getAllParamSet">
            <summary>
            获取所有的参数集的集合
            </summary>
            <returns>包含所有参数集的Hashtable，每个key-value对为一个参数集，key为参数集名称，value为表示参数集的ArrayList对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.getUserIndentity">
            <summary>
            获取操作用户信息
            </summary>
            <returns>操作用户对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ParameterObj.setUserIndentity(Powerise.Hygeia.Framework.UserIndentity)">
            <summary>
            设置操作用户信息（系统框架使用）
            </summary>
            <param name="userIndentity">操作用户对象</param>
        </member>
        <member name="T:Powerise.Hygeia.Framework.ResultObj">
            <summary>
            结果对象（实现IResultObj接口）。
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.IResultObj">
            <summary>
            结果对象接口。（系统框架在调用控制类的execute方法时，会先实例化此接口的一个实例，在控制类中调用实例提供的方法将结果（或错误信息）写入实例中，系统框架将根据此实例生成XML返回给客户端）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultObj.init">
            <summary>
            初始化返回结果对象（系统框架使用）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultObj.destroy">
            <summary>
            析构结果对象（系统框架使用）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultObj.getResult(System.String)">
            <summary>
            根据名称取得结果单值（系统框架使用）
            </summary>
            <param name="rstName">结果名称</param>
            <returns>结果值对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultObj.getResult">
            <summary>
            获取所有的结果单值集合（系统框架使用）
            </summary>
            <returns>以Hashtable的形式返回结果名称和结果值的键-值对</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultObj.getResultSet(System.String)">
            <summary>
            取得结果集对象（系统框架使用）
            </summary>
            <param name="rstName">结果集名称</param>
            <returns>结果集对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultObj.getResultSet">
            <summary>
            获取所有的结果集（系统框架使用）
            </summary>
            <returns>结果集对象集合</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultObj.setResult(System.String,System.Object)">
            <summary>
            设置返回结果单值，以key-value的形式
            </summary>
            <param name="rstName">结果单值名称</param>
            <param name="result">结果值对象，使用Object类型是为了以后的扩展，在生成XML时会调用它的ToString方法</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultObj.setResultSet(System.String,System.Data.DataTable)">
            <summary>
            设置返回结果集
            </summary>
            <param name="rstName">结果集名称</param>
            <param name="resultSet">DataTable类型的结果集对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultObj.setRetCode(System.String)">
            <summary>
            设置返回值
            </summary>
            <param name="retCode">返回编号</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IResultObj.setRetMsg(System.String)">
            <summary>
            设置返回信息
            </summary>
            <param name="retMsg">返回信息</param>
        </member>
        <member name="P:Powerise.Hygeia.Framework.IResultObj.DEFAULT_RESULTSET">
            <summary>
            缺省结果集名称
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.IResultObj.error">
            <summary>
            错误对象（请调用ErrorHelper类的handleError方法赋值）
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.IResultObj.FuncID">
            <summary>
            功能号（系统框架使用）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ResultObj.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ResultObj.ToString">
            <summary>
            格式化结果对象
            </summary>
            <returns>结果对象字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ResultObj.setResult(System.String,System.Object)">
            <summary>
            设置返回结果单值，以key-value的形式
            </summary>
            <param name="rstName">结果单值名称</param>
            <param name="result">结果值对象，使用Object类型是为了以后的扩展，在生成XML时会调用它的ToString方法</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ResultObj.getResult(System.String)">
            <summary>
            取得结果集对象（系统框架使用）
            </summary>
            <param name="rstName">结果集名称</param>
            <returns>结果集对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ResultObj.init">
            <summary>
            初始化返回结果对象（系统框架使用）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ResultObj.setResultSet(System.String,System.Data.DataTable)">
            <summary>
            设置返回结果集
            </summary>
            <param name="rstName">结果集名称</param>
            <param name="resultSet">DataTable类型的结果集对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ResultObj.getResultSet(System.String)">
            <summary>
            取得结果集对象（系统框架使用）
            </summary>
            <param name="rstName">结果集名称</param>
            <returns>结果集对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ResultObj.destroy">
            <summary>
            析构结果对象（系统框架使用）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ResultObj.getResultSet">
            <summary>
            获取所有的结果集（系统框架使用）
            </summary>
            <returns>结果集对象集合</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ResultObj.getResult">
            <summary>
            获取所有的结果单值集合（系统框架使用）
            </summary>
            <returns>以Hashtable的形式返回结果名称和结果值的键-值对</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ResultObj.setRetCode(System.String)">
            <summary>
            设置返回值
            </summary>
            <param name="retCode">返回编号</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ResultObj.setRetMsg(System.String)">
            <summary>
            设置返回信息
            </summary>
            <param name="retMsg">返回信息</param>
        </member>
        <member name="P:Powerise.Hygeia.Framework.ResultObj.DEFAULT_RESULTSET">
            <summary>
            缺省结果集名称
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.ResultObj.error">
            <summary>
            错误对象（请调用ErrorHelper类的handleError方法赋值）
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.ResultObj.FuncID">
            <summary>
            功能号（系统框架使用）
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.RightActionMapping">
            <summary>
            业务逻辑权限缓存对象（使用Singleton将sys_right_method数据缓存到系统内存）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightActionMapping.getInstance">
            <summary>
            获取此类的唯一实例（不能使用构造方法实例化）
            </summary>
            <returns>此类的唯一实例</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightActionMapping.init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightActionMapping.hasRight(System.Int32,System.String)">
            <summary>
            判断权限中是否存在此业务逻辑
            </summary>
            <param name="iRight">权限编号</param>
            <param name="strFuncID">功能号</param>
            <returns>存在或不存在</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightActionMapping.hasRight(System.String,System.String)">
            <summary>
            判断权限列表中是否存在此业务逻辑
            </summary>
            <param name="strRightList">权限列表（逗号分隔）</param>
            <param name="strFuncID">功能号</param>
            <returns>存在或不存在</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.RightMenuMapping">
            <summary>
            用户菜单权限缓存对象（使用Singleton将sys_right_menu数据缓存到系统内存）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightMenuMapping.getInstance">
            <summary>
            获取此类的唯一实例（不能使用构造方法实例化）
            </summary>
            <returns>此类的唯一实例</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightMenuMapping.getSystem(System.Int32)">
            <summary>
            根据权限编号获取菜单
            </summary>
            <param name="iRight">权限编号</param>
            <returns>菜单对象DataView</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightMenuMapping.getMenu(System.Int32,System.Int32)">
            <summary>
            根据权限编号和上级菜单编号获取菜单
            </summary>
            <param name="iRight">权限编号</param>
            <param name="iMenuUpId">上级菜单编号</param>
            <returns>菜单对象DataView</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightMenuMapping.getMenuRow(System.Int32,System.Int32)">
            <summary>
            根据权限编号和上级菜单编号获取菜单
            </summary>
            <param name="iRight">权限编号</param>
            <param name="iMenuUpId">上级菜单编号</param>
            <returns>菜单对象DataRow</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightMenuMapping.getMenu(System.String,System.String,System.String)">
            <summary>
            根据条件，排序返回指点列的菜单集合
            </summary>
            <param name="strFiled">返回列列表</param>
            <param name="strFilter">过滤条件</param>
            <param name="strSort">排序</param>
            <returns>菜单集合</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightMenuMapping.getMenuRender(System.String)">
            <summary>
            获取菜单输出字符串
            </summary>
            <param name="key">菜单输出主键</param>
            <returns>菜单输出值（为空表示没有）</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightMenuMapping.setMenuRender(System.String,System.String)">
            <summary>
            设置菜单输出字符串
            </summary>
            <param name="key">菜单输出主键</param>
            <param name="value">菜单输出值</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightMenuMapping.hasRightMenu(System.Int32,System.String)">
            <summary>
            判断权限中是否存在此菜单
            </summary>
            <param name="iRight">权限编号</param>
            <param name="strUrl">菜单地址</param>
            <returns>存在或是不存在</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightMenuMapping.getMenuNameByURL(System.String)">
            <summary>
            根据菜单地址获取菜单名称
            </summary>
            <param name="strUrl">菜单地址</param>
            <returns>菜单名称</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.RightMenuMapping.hasRightMenu(System.String,System.String)">
            <summary>
            判断权限列表中是否存在此菜单
            </summary>
            <param name="strRightList">权限列表（逗号分隔）</param>
            <param name="strUrl">菜单地址</param>
            <returns>存在或不存在</returns>
        </member>
        <member name="P:Powerise.Hygeia.Framework.RightMenuMapping.isSupportAdminMenu">
            <summary>
            是否支持管理员菜单(数据是否包含admin_flag)
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.StaffMapping">
            <summary>
            用户信息缓存对象（使用Singleton将sys_staff, sys_staff_right数据缓存到系统内存）。
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.StaffMapping.USER_PARAM_SEPARATOR">
            <summary>
            用户参数分隔符(缺省+)
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StaffMapping.getInstance">
            <summary>
            获取此类的唯一实例（不能使用构造方法实例化）
            </summary>
            <returns>此类的唯一实例</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StaffMapping.find(System.String)">
            <summary>
            根据登录名查找用户信息
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StaffMapping.combine(System.String[])">
            <summary>
            合并一个登录用户名
            </summary>
            <param name="param">参数数组</param>
            <returns>合并以后的登录用户名</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StaffMapping.add(System.String)">
            <summary>
            增加一个操作用户(根据系统参数表的get_user_sql自动获取)
            </summary>
            <param name="strLoginUser">登录用户名</param>
            <return>返回新增用户信息，新增失败返回null</return>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StaffMapping.add(System.String,System.Data.DataRow)">
            <summary>
            增加一个操作用户
            </summary>
            <param name="strLoginUser">登录用户名</param>
            <param name="drUser">用户信息</param>
            <return>返回新增用户信息，新增失败返回null</return>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StaffMapping.remvoe(System.String)">
            <summary>
            删除一个操作用户
            </summary>
            <param name="strLoginUser">登录用户名</param>
            <return>小于0失败 大于等于0表示影响的记录数</return>
        </member>
        <member name="P:Powerise.Hygeia.Framework.StaffMapping.Item(System.String)">
            <summary>
            根据登录名获取用户信息
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.StatistType">
            <summary>
            统计类型
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.StatistType.DB">
            <summary>
            数据库
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.StatistType.PAGE">
            <summary>
            页面
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.StatistType.BIZ">
            <summary>
            业务逻辑
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.StatistManager">
            <summary>
            管理统计对象。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.getInstance">
            <summary>
            获取此类的唯一实例（不能使用构造方法实例化）
            </summary>
            <returns>此类的唯一实例</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.GetStoreType">
            <summary>
            统计信息存储类型
            </summary>
            <returns>1内存 2数据库</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.GetStoreTypeName">
            <summary>
            统计信息存储类型
            </summary>
            <returns>存储类型名称</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.Clear">
            <summary>
            清除所有统计信息
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.Clear(System.String)">
            <summary>
            清除指定名称的统计信息
            </summary>
            <param name="name">统计项名称</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.AutoClean">
            <summary>
            自动清理
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.GetMaxDays">
            <summary>
            获取数据保留最大天数
            </summary>
            <returns>最大天数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.Start(System.String,System.Collections.Hashtable)">
            <summary>
            开始指定名称的统计
            </summary>
            <param name="name">统计项名称</param>
            <param name="data">统计数据</param>
            <returns>统计数据ID</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.Stop(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            停止一个指定名称的统计
            </summary>
            <param name="name">统计项名称</param>
            <param name="key">统计数据ID</param>
            <param name="data">统计数据</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.GetCount(System.String)">
            <summary>
            获取指定名称的统计项数据记录数
            </summary>
            <param name="name">统计项名称</param>
            <returns>记录数（没有对应数据返回-1）</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.GetData(System.String,System.String,System.String,System.Int32@,System.Int32,System.Int32)">
            <summary>
            获取指定名称的统计项数据（分页）
            </summary>
            <param name="name">统计项名称</param>
            <param name="filter">过滤</param>
            <param name="sort">排序</param>
            <param name="count">总行数</param>
            <param name="pagesize">页记录数</param>
            <param name="pageindex">页索引</param>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.IsRunning(System.String)">
            <summary>
            判断指定名称的统计项是否正在运行
            </summary>
            <param name="name">统计项名称</param>
            <returns>运行为ture</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.IsDebug(System.String)">
            <summary>
            判断指定名称的统计项是否调试
            </summary>
            <param name="name">统计项名称</param>
            <returns>运行为ture</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.SetStatus(System.String,System.String)">
            <summary>
            设置指定名称的统计项运行状态
            </summary>
            <param name="name">统计项名称</param>
            <param name="status">状态（0:停止 1:运行）</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.Resume(System.String)">
            <summary>
            恢复服务
            </summary>
            <param name="name">服务名</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistManager.Pause(System.String)">
            <summary>
            暂停服务
            </summary>
            <param name="name">服务名</param>
        </member>
        <member name="P:Powerise.Hygeia.Framework.StatistManager.Item(System.String)">
            <summary>
            获取指定名称的统计项数据(所有数据)
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.StatistObj">
            <summary>
             统计对象。
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.StatistObj.SUCCESS">
            <summary>
            成功标志
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.StatistObj.ERROR">
            <summary>
            失败标志
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistObj.#ctor(System.String)">
            <summary>
            创建一个统计对象
            </summary>
            <param name="name">统计项名称</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistObj.Start(System.String,System.String)">
            <summary>
            开始一个统计项
            </summary>
            <param name="opername">操作名</param>
            <param name="operobject">统计对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistObj.Start(System.String,System.Data.IDbDataParameter[],System.String)">
            <summary>
            开始一个统计项（数据逻辑)
            </summary>
            <param name="opername">操作名</param>
            <param name="param">统计参数</param>
            <param name="operobject">统计对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistObj.Start(System.Web.UI.Page,System.String)">
            <summary>
            开始一个统计项（展现逻辑）
            </summary>
            <param name="page">页面对象</param>
            <param name="username">用户名</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistObj.Start(System.String,Powerise.Hygeia.Framework.IParameterObj,System.String)">
            <summary>
            开始一个统计项（业务逻辑）
            </summary>
            <param name="opername">操作名</param>
            <param name="param">统计参数</param>
            <param name="operobject">统计对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistObj.Start(System.String,System.String,System.String)">
            <summary>
            开始一个统计项（通用）
            </summary>
            <param name="opername">操作名</param>
            <param name="operparam">统计参数</param>
            <param name="operobject">统计对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistObj.Stop(Powerise.Hygeia.Framework.IResultObj)">
            <summary>
            停止一个统计项（业务逻辑）
            </summary>
            <param name="result">结果对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistObj.Stop(System.Int32,System.String)">
            <summary>
            停止一个统计项
            </summary>
            <param name="operresult">操作结果</param>
            <param name="operremark">结果备注</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistObj.Stop(System.Exception)">
            <summary>
            停止一个统计（出现异常）
            </summary>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StatistObj.Stop(System.Int32,System.Int32,System.String)">
            <summary>
            停止一个统计对象
            </summary>
            <param name="operstatus">操作状态</param>
            <param name="operresult">操作结果</param>
            <param name="operremark">结果备注</param>
        </member>
        <member name="P:Powerise.Hygeia.Framework.StatistObj.Enable">
            <summary>
            统计对象是否启用
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.StyleMapping">
            <summary>
            样式缓存对象（使用Singleton将style.css和style.config文件数据缓存到系统内存）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StyleMapping.getInstance">
            <summary>
            获取此类的唯一实例（不能使用构造方法实例化）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StyleMapping.setDefaultStyle(System.String,System.String)">
            <summary>
            设置缺省样式
            </summary>
            <param name="className">样式名称</param>
            <param name="strStyle">样式字符串</param>
            <returns>解析后的样式集合</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StyleMapping.getVersion">
            <summary>
            获取文件版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StyleMapping.init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StyleMapping.ParseCssFile(System.String)">
            <summary>
            解析css文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StyleMapping.ParseCssStyle(System.String)">
            <summary>
            解析style字符串
            </summary>
            <param name="strStyle">样式字符串</param>
            <returns>包含样式名称和值的Hashtable</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.StyleMapping.ParseConfigFile(System.String)">
            <summary>
            解析config文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="P:Powerise.Hygeia.Framework.StyleMapping.Item(System.String)">
            <summary>
            通过样式类型名称获取对应样式
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.UserIndentity">
            <summary>
            用户身份信息。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.UserIndentity.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.UserIndentity.getUserInfo">
            <summary>
            获取用户信息
            </summary>
            <returns>用户信息</returns>
        </member>
        <member name="P:Powerise.Hygeia.Framework.UserIndentity.LoginUser">
            <summary>
            登录用户名
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.UserIndentity.LoginTime">
            <summary>
            登录时间
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.UserIndentity.LoginIP">
            <summary>
            登录时间
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.UserIndentity.UserInfo">
            <summary>
            用户信息（从系统内存获取）
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.XmlParamEncoder">
            <summary>
            参数对象编码的实现（使用StringBuilder将参数对象编码为XML文本）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XmlParamEncoder.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XmlParamEncoder.getResult">
            <summary>
            获取处理后的结果
            </summary>
            <returns>处理后的结果字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XmlParamEncoder.encodeParam(Powerise.Hygeia.Framework.IParameterObj)">
            <summary>
            对参数对象进行编码处理
            </summary>
            <param name="paramObj">参数对象</param>
            <returns>处理结果（1为成功）</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XmlParamEncoder.encodeParam(Powerise.Hygeia.Framework.IParameterObj,System.String,System.String)">
            <summary>
            对参数对象进行编码处理
            </summary>
            <param name="paramObj">参数对象</param>
            <param name="loginUser">登录用户名</param>
            <param name="loginTime">登录时间</param>
            <returns>处理结果（1为成功）</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XmlParamEncoder.encodeHead(Powerise.Hygeia.Framework.IParameterObj,System.Text.StringBuilder)">
            <summary>
            处理参数头信息
            </summary>
            <param name="paramObj">参数对象</param>
            <param name="stbResult">处理字符串</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XmlParamEncoder.encodeFoot(Powerise.Hygeia.Framework.IParameterObj,System.Text.StringBuilder)">
            <summary>
            处理参数尾信息
            </summary>
            <param name="paramObj">参数对象</param>
            <param name="stbResult">处理字符串</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XmlParamEncoder.encodeParameter(Powerise.Hygeia.Framework.IParameterObj,System.Text.StringBuilder)">
            <summary>
            处理参数信息
            </summary>
            <param name="paramObj">参数对象</param>
            <param name="stbResult">处理字符串</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XmlParamEncoder.encodeParamSet(Powerise.Hygeia.Framework.IParameterObj,System.Text.StringBuilder)">
            <summary>
            处理参数集合信息
            </summary>
            <param name="paramObj">参数对象</param>
            <param name="stbResult">处理字符串</param>
        </member>
        <member name="T:Powerise.Hygeia.Framework.XMLParameterParse">
            <summary>
            解析XML格式的字符串为参数对象。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XMLParameterParse.parseParam(System.String)">
            <summary>
            解析XML字符串（支持文件解析）
            </summary>
            <param name="strXml">XML字符串</param>
            <returns>解析后的参数对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XMLParameterParse.parsePipe(System.String,System.String,System.String,System.String,System.Collections.ArrayList)">
            <summary>
            解析管道字符串
            </summary>
            <param name="strData">字符串数据</param>
            <param name="strColList">列名列表（逗号分隔）</param>
            <param name="strColSeparator">列分隔符</param>
            <param name="strLineSeparator">行分隔符</param>
            <param name="alResult">结果集</param>
            <returns>结果集行数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XMLParameterParse.parse(System.String)">
            <summary>
            解析XML字符串
            </summary>
            <param name="strXml">XML字符串</param>
            <returns>参数对象</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.XMLResultRender">
            <summary>
            结果对象编码的实现（使用StringBuilder或XmlDocument将结果对象编码为XML文本）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XMLResultRender.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XMLResultRender.encodeResult(Powerise.Hygeia.Framework.IResultObj)">
            <summary>
            生成XML字符串（使用StringBuilder将控制类中的错误信息、结果和结果集打包成XML字符串）
            </summary>
            <param name="resultObj">需要打包成XML的结果集对象</param>
            <returns>XML字符串</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.XMLResultRender.render(Powerise.Hygeia.Framework.IResultObj)">
            <summary>
            生成XML字符串（使用XmlDocument将控制类中的错误信息、结果和结果集打包成XML字符串）
            </summary>
            <param name="resultObj">需要打包成XML的结果集对象</param>
            <returns>XML字符串</returns>
        </member>
        <member name="T:Powerise.Hygeia.Framework.BaseCtrl">
            <summary>
            业务控制类基类。
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.BaseCtrl.SUCCESS">
            <summary>
            成功（execute返回值）
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.BaseCtrl.FAILURE">
            <summary>
            失败（execute返回值）
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.BaseCtrl.INFO">
            <summary>
            提示错误(结果集返回错误类型）
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.BaseCtrl.ERROR">
            <summary>
            业务错误(结果集返回错误类型）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.init(Powerise.Hygeia.Framework.IParameterObj,Powerise.Hygeia.Framework.IResultObj)">
            <summary>
            初始化
            </summary>
            <param name="parameter">参数对象</param>
            <param name="result">结果对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.getParameterObj">
            <summary>
            返回参数对象
            </summary>
            <returns>参数对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.getActionCode">
            <summary>
            获取业务功能号
            </summary>
            <returns>功能号</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.getActionName">
            <summary>
            获取业务功能描述
            </summary>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.getUserIndentity">
            <summary>
            获取用户对象
            </summary>
            <returns>用户对象</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.getParameter(System.String)">
            <summary>
            获取参数
            </summary>
            <param name="paramName">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.getParamSet(System.String)">
            <summary>
            获取参数集
            </summary>
            <param name="paramSetName">参数集名称</param>
            <returns>参数集</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.getAllParameters">
            <summary>
            获取所有参数
            </summary>
            <returns>参数</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.getAllParamSet">
            <summary>
            获取参数集列表
            </summary>
            <returns>参数集列表</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.getResultObj">
            <summary>
            获取结果对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.setRetCode(System.String)">
            <summary>
            设置返回值
            </summary>
            <param name="retCode">返回编号</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.setRetMsg(System.String)">
            <summary>
            设置返回信息
            </summary>
            <param name="retMsg">返回信息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.setResult(System.String,System.Object)">
            <summary>
            设置结果
            </summary>
            <param name="name">结果名</param>
            <param name="value">结果值</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.setResultSet(System.String,System.Data.DataTable)">
            <summary>
            设置结果集
            </summary>
            <param name="rstName">结果集名称</param>
            <param name="resultSet">结果集对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.setResultSet(System.Data.DataTable)">
            <summary>
            设置缺省结果集
            </summary>
            <param name="resultSet">结果集对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.errorHandle(System.Int32,System.String)">
            <summary>
            错误处理
            </summary>
            <param name="errNo">错误号</param>
            <param name="errMsg">错误信息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.errorHandle(System.Int32,System.Int32,System.String)">
            <summary>
            错误处理
            </summary>
            <param name="errType">错误类型</param>
            <param name="errNo">错误号</param>
            <param name="errMsg">错误信息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.errorHandle(System.Int32,System.Int32,System.String,System.Exception)">
            <summary>
             错误处理
            </summary>
            <param name="errType">错误类型</param>
            <param name="errNo">错误号</param>
            <param name="errMsg">错误信息</param>
            <param name="t">异常对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.errorHandle(System.Int32,System.Int32,System.Exception)">
            <summary>
            错误处理
            </summary>
            <param name="errType">错误类型</param>
            <param name="errNo">错误号</param>
            <param name="t">异常对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.errorHandle(System.Int32,System.String,System.Exception)">
            <summary>
            错误处理
            </summary>
            <param name="errNo">错误号</param>
            <param name="errMsg">错误信息</param>
            <param name="t">异常对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.errorHandle(System.Int32,Powerise.Hygeia.Framework.exception.HygeiaException)">
            <summary>
            错误处理
            </summary>
            <param name="errNo">错误号</param>
            <param name="t">异常对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.getErrorCode(System.Int32)">
            <summary>
            获取错误号
            </summary>
            <param name="errNo">错误号</param>
            <returns>功能号+6位左补0错误号</returns>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.Dispose">
            <summary>
            系统释放数据库资源（系统调用，显式释放请调用Free方法）
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.Commit">
            <summary>
            提交数据库事务
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.Rollback">
            <summary>
            回滚数据库事务
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseCtrl.Free">
            <summary>
            释放数据库资源
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.BaseCtrl.UserInfo">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.BaseCtrl.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.BaseCtrl.Transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.BaseEntity">
            <summary>
            业务实体类基类。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseEntity.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseEntity.#ctor(System.Data.IDbConnection)">
            <summary>
            构造函数
            </summary>
            <param name="conn">数据库连接对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseEntity.#ctor(System.Data.IDbTransaction)">
            <summary>
            构造函数
            </summary>
            <param name="trans">数据库事务对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseEntity.#ctor(Powerise.Hygeia.Framework.IParameterObj)">
            <summary>
            构造函数
            </summary>
            <param name="param">参数对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseEntity.#ctor(System.Data.IDbConnection,Powerise.Hygeia.Framework.IParameterObj)">
            <summary>
            构造函数
            </summary>
            <param name="conn">数据库连接对象</param>
            <param name="param">参数对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseEntity.#ctor(System.Data.IDbTransaction,Powerise.Hygeia.Framework.IParameterObj)">
            <summary>
            构造函数
            </summary>
            <param name="trans">数据库事务对象</param>
            <param name="param">参数对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseEntity.#ctor(Powerise.Hygeia.Framework.UserIndentity)">
            <summary>
            构造函数
            </summary>
            <param name="indentify">用户身份信息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseEntity.#ctor(System.Data.IDbConnection,Powerise.Hygeia.Framework.UserIndentity)">
            <summary>
            构造函数
            </summary>
            <param name="conn">数据库连接对象</param>
            <param name="indentify">用户身份信息</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseEntity.#ctor(System.Data.IDbTransaction,Powerise.Hygeia.Framework.UserIndentity)">
            <summary>
            构造函数
            </summary>
            <param name="trans">数据库事务对象</param>
            <param name="indentify">用户身份信息</param>
        </member>
        <member name="F:Powerise.Hygeia.Framework.BaseEntity._connOrTrans">
            <summary>
            数据连接对象或数据库事务对象
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseEntity.setConnOrTrans(System.Object)">
            <summary>
            如果控制类只使用本类查询数据库，则调用本方法将数据库连接对象传入；
            如果控制类只使用本类更新数据库，则必须调用本方法将数据库事务传入，不需要再传入数据库连接对象
            </summary>
            <param name="connOrTrans">数据库连接对象（IDbConnection）或数据库事务对象（IDbTransaction）</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseEntity.setUserInfo(Powerise.Hygeia.Framework.IParameterObj)">
            <summary>
            设置用户信息
            </summary>
            <param name="param">参数对象</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.BaseEntity.setUserInfo(Powerise.Hygeia.Framework.UserIndentity)">
            <summary>
            设置用户信息
            </summary>
            <param name="indentify">用户身份信息</param>
        </member>
        <member name="P:Powerise.Hygeia.Framework.BaseEntity.UserInfo">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.ErrorObj">
            <summary>
            错误对象（用于控制类返回结果中，保存错误信息，主要有错误号、返回信息、错误类型、异常信息；如果控制类执行成功则不需设置错误信息，请使用ErrorHelper类设置错误信息，不要直接使用此类的属性和方法）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ErrorObj.#ctor">
            <summary>
            初始化错误对象
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ErrorObj.setException(System.Exception)">
            <summary>
            设置异常信息，不需要在控制类中直接使用此方法
            </summary>
            <param name="e">异常</param>
        </member>
        <member name="M:Powerise.Hygeia.Framework.ErrorObj.ToString">
            <summary>
            格式化错误对象字符串
            </summary>
            <returns>错误对象格式字符串</returns>
        </member>
        <member name="P:Powerise.Hygeia.Framework.ErrorObj.RetCode">
            <summary>
            设置错误号，没有错误时该值应为1，失败时该值为错误代码，不需要在控制类中直接设置此属性
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.ErrorObj.ErrMsg">
            <summary>
            返回信息，不需要在控制类中直接设置此属性
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.ErrorObj.ExpMsg">
            <summary>
            异常信息，不需要在控制类中直接设置此属性
            </summary>
        </member>
        <member name="P:Powerise.Hygeia.Framework.ErrorObj.ErrType">
             <summary>
             错误类别，不需要在控制类中直接设置此属性
            0	执行正常
            1	提示，对于因业务逻辑不满足条件或业务逻辑不能完成的情况，采用该返回代码
            2	错误，对于执行业务逻辑过程中因系统发生错误或异常引起的业务逻辑不能完成的情况，采用该返回代码
            请使用ErrorType类定义的常量，而不直接使用数值
             </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.ErrorType">
            <summary>
            错误类型对象（在调用ErrorHelper类时，请使用此类提供的常量设置错误类型）。
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.ErrorType.SUCCESS">
            <summary>
            成功（返回成功信息时使用此常量，框架默认设置为成功，所以业务控制类无需显式设置此常量）
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.ErrorType.INFO">
            <summary>
            提示（返回提示信息时使用此常量，如：参数校验不通过时等）
            </summary>
        </member>
        <member name="F:Powerise.Hygeia.Framework.ErrorType.ERROR">
            <summary>
            错误（返回错误时使用此常量，如：程序运行出现异常等）
            </summary>
        </member>
        <member name="T:Powerise.Hygeia.Framework.IBusiService">
            <summary>
            业务控制类接口（所有业务控制类必须实现此接口）。
            </summary>
        </member>
        <member name="M:Powerise.Hygeia.Framework.IBusiService.execute(Powerise.Hygeia.Framework.IParameterObj,Powerise.Hygeia.Framework.IResultObj)">
            <summary>
            所有业务控制类必须实现此接口方法，传入参数对象和结果对象的一个实例，
            在此方法中可以使用参数对象的参数值和参数集，执行相应的处理，并将结果值和结果集设置到结果对象中，
            当发生错误或需要返回提示信息时，调用ErrorHelper类设置Error对象并返回
            </summary>
            <param name="param">由前台传入的参数对象，在系统框架中会将参数值和参数集保存到参数对象中</param>
            <param name="result">返回给系统框架层的结果对象</param>
        </member>
    </members>
</doc>
